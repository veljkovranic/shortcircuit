[NonTerminal(NonTerminalToken { span: (0, 1161), rule: Circuit, subrules: [NonTerminal(NonTerminalToken { span: (0, 22), rule: CompilerDirective, subrules: [Terminal(TerminalToken { span: (0, 7), rule: PragmaKW, content: "pragma " }), Terminal(TerminalToken { span: (7, 14), rule: CircomKW, content: "circom " }), NonTerminal(NonTerminalToken { span: (14, 20), rule: E_SemVer, subrules: [Terminal(TerminalToken { span: (14, 15), rule: E_Decimal, content: "2" }), Terminal(TerminalToken { span: (16, 17), rule: E_Decimal, content: "1" }), Terminal(TerminalToken { span: (18, 19), rule: E_Decimal, content: "6" })] })] }), NonTerminal(NonTerminalToken { span: (22, 63), rule: IncludeStatement, subrules: [Terminal(TerminalToken { span: (22, 30), rule: IncludeKW, content: "include " }), NonTerminal(NonTerminalToken { span: (30, 62), rule: IncludePathString, subrules: [Terminal(TerminalToken { span: (31, 61), rule: FilesystemPath, content: "circomlib/circuits/mux1.circom" })] }), Terminal(TerminalToken { span: (62, 63), rule: END_OF_LINE, content: ";" })] }), NonTerminal(NonTerminalToken { span: (64, 112), rule: IncludeStatement, subrules: [Terminal(TerminalToken { span: (64, 72), rule: IncludeKW, content: "include " }), NonTerminal(NonTerminalToken { span: (72, 111), rule: IncludePathString, subrules: [Terminal(TerminalToken { span: (73, 110), rule: FilesystemPath, content: "circomlib/circuits/comparators.circom" })] }), Terminal(TerminalToken { span: (111, 112), rule: END_OF_LINE, content: ";" })] }), NonTerminal(NonTerminalToken { span: (114, 141), rule: TemplateBlock, subrules: [Terminal(TerminalToken { span: (114, 123), rule: TemplateKW, content: "template " }), Terminal(TerminalToken { span: (123, 126), rule: TemplateName, content: "Omg" }), NonTerminal(NonTerminalToken { span: (126, 132), rule: Parameters, subrules: [Terminal(TerminalToken { span: (127, 128), rule: VariableName, content: "B" }), Terminal(TerminalToken { span: (130, 131), rule: VariableName, content: "C" })] }), Terminal(TerminalToken { span: (133, 141), rule: Body, content: "{\n    \n}" })] }), NonTerminal(NonTerminalToken { span: (143, 986), rule: TemplateBlock, subrules: [Terminal(TerminalToken { span: (143, 152), rule: TemplateKW, content: "template " }), Terminal(TerminalToken { span: (152, 162), rule: TemplateName, content: "Battleship" }), NonTerminal(NonTerminalToken { span: (162, 165), rule: Parameters, subrules: [Terminal(TerminalToken { span: (163, 164), rule: VariableName, content: "N" })] }), NonTerminal(NonTerminalToken { span: (166, 986), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (172, 196), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (172, 185), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (172, 179), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (179, 179), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (179, 185), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (185, 190), rule: E_VariableName, content: "board" }), NonTerminal(NonTerminalToken { span: (190, 193), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (190, 191), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (191, 192), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (191, 192), rule: E_Value, subrules: [Terminal(TerminalToken { span: (191, 192), rule: E_VariableName, content: "N" })] })] }), Terminal(TerminalToken { span: (192, 193), rule: ArrayDeclarationOperatorClose, content: "]" })] }), NonTerminal(NonTerminalToken { span: (193, 196), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (193, 194), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (194, 195), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (194, 195), rule: E_Value, subrules: [Terminal(TerminalToken { span: (194, 195), rule: E_VariableName, content: "N" })] })] }), Terminal(TerminalToken { span: (195, 196), rule: ArrayDeclarationOperatorClose, content: "]" })] })] }), Terminal(TerminalToken { span: (196, 197), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (202, 217), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (202, 215), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (202, 209), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (209, 209), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (209, 215), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (215, 217), rule: E_VariableName, content: "ii" })] }), Terminal(TerminalToken { span: (217, 218), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (223, 238), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (223, 236), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (223, 230), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (230, 230), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (230, 236), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (236, 238), rule: E_VariableName, content: "jj" })] }), Terminal(TerminalToken { span: (238, 239), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (245, 265), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (245, 259), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (245, 252), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (252, 252), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (252, 259), rule: SignalDeclarationConnectionKW, content: "output " })] }), Terminal(TerminalToken { span: (259, 265), rule: E_VariableName, content: "answer" })] }), Terminal(TerminalToken { span: (265, 266), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (272, 285), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (272, 276), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (276, 281), rule: E_VariableName, content: "isHit" }), NonTerminal(NonTerminalToken { span: (284, 285), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (284, 285), rule: E_Value, subrules: [Terminal(TerminalToken { span: (284, 285), rule: E_Decimal, content: "0" })] })] })] }), Terminal(TerminalToken { span: (285, 286), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (291, 317), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (291, 301), rule: ComponentDeclarationKW, content: "component " }), Terminal(TerminalToken { span: (301, 311), rule: E_VariableName, content: "checkField" }), NonTerminal(NonTerminalToken { span: (311, 314), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (311, 312), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (312, 313), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (312, 313), rule: E_Value, subrules: [Terminal(TerminalToken { span: (312, 313), rule: E_VariableName, content: "N" })] })] }), Terminal(TerminalToken { span: (313, 314), rule: ArrayDeclarationOperatorClose, content: "]" })] }), NonTerminal(NonTerminalToken { span: (314, 317), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (314, 315), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (315, 316), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (315, 316), rule: E_Value, subrules: [Terminal(TerminalToken { span: (315, 316), rule: E_VariableName, content: "N" })] })] }), Terminal(TerminalToken { span: (316, 317), rule: ArrayDeclarationOperatorClose, content: "]" })] })] }), Terminal(TerminalToken { span: (317, 318), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (323, 347), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (323, 333), rule: ComponentDeclarationKW, content: "component " }), Terminal(TerminalToken { span: (333, 341), rule: E_VariableName, content: "isEqualI" }), NonTerminal(NonTerminalToken { span: (341, 344), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (341, 342), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (342, 343), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (342, 343), rule: E_Value, subrules: [Terminal(TerminalToken { span: (342, 343), rule: E_VariableName, content: "N" })] })] }), Terminal(TerminalToken { span: (343, 344), rule: ArrayDeclarationOperatorClose, content: "]" })] }), NonTerminal(NonTerminalToken { span: (344, 347), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (344, 345), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (345, 346), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (345, 346), rule: E_Value, subrules: [Terminal(TerminalToken { span: (345, 346), rule: E_VariableName, content: "N" })] })] }), Terminal(TerminalToken { span: (346, 347), rule: ArrayDeclarationOperatorClose, content: "]" })] })] }), Terminal(TerminalToken { span: (347, 348), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (353, 377), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (353, 363), rule: ComponentDeclarationKW, content: "component " }), Terminal(TerminalToken { span: (363, 371), rule: E_VariableName, content: "isEqualJ" }), NonTerminal(NonTerminalToken { span: (371, 374), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (371, 372), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (372, 373), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (372, 373), rule: E_Value, subrules: [Terminal(TerminalToken { span: (372, 373), rule: E_VariableName, content: "N" })] })] }), Terminal(TerminalToken { span: (373, 374), rule: ArrayDeclarationOperatorClose, content: "]" })] }), NonTerminal(NonTerminalToken { span: (374, 377), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (374, 375), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (375, 376), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (375, 376), rule: E_Value, subrules: [Terminal(TerminalToken { span: (375, 376), rule: E_VariableName, content: "N" })] })] }), Terminal(TerminalToken { span: (376, 377), rule: ArrayDeclarationOperatorClose, content: "]" })] })] }), Terminal(TerminalToken { span: (377, 378), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (385, 962), rule: ForStatement, subrules: [Terminal(TerminalToken { span: (385, 388), rule: ForKW, content: "for" }), NonTerminal(NonTerminalToken { span: (390, 399), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (390, 394), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (394, 395), rule: E_VariableName, content: "i" }), NonTerminal(NonTerminalToken { span: (398, 399), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (398, 399), rule: E_Value, subrules: [Terminal(TerminalToken { span: (398, 399), rule: E_Decimal, content: "0" })] })] })] }), NonTerminal(NonTerminalToken { span: (401, 406), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (401, 402), rule: E_Value, subrules: [Terminal(TerminalToken { span: (401, 402), rule: E_VariableName, content: "i" })] }), Terminal(TerminalToken { span: (403, 405), rule: E_12_RelationalOrderingOperator, content: "< " }), NonTerminal(NonTerminalToken { span: (405, 406), rule: E_Value, subrules: [Terminal(TerminalToken { span: (405, 406), rule: E_VariableName, content: "N" })] })] }), NonTerminal(NonTerminalToken { span: (408, 411), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (408, 409), rule: E_Value, subrules: [Terminal(TerminalToken { span: (408, 409), rule: E_VariableName, content: "i" })] }), Terminal(TerminalToken { span: (409, 411), rule: E_18_PostfixOperator, content: "++" })] }), NonTerminal(NonTerminalToken { span: (413, 962), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (423, 956), rule: ForStatement, subrules: [Terminal(TerminalToken { span: (423, 426), rule: ForKW, content: "for" }), NonTerminal(NonTerminalToken { span: (428, 437), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (428, 432), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (432, 433), rule: E_VariableName, content: "j" }), NonTerminal(NonTerminalToken { span: (436, 437), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (436, 437), rule: E_Value, subrules: [Terminal(TerminalToken { span: (436, 437), rule: E_Decimal, content: "0" })] })] })] }), NonTerminal(NonTerminalToken { span: (439, 444), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (439, 440), rule: E_Value, subrules: [Terminal(TerminalToken { span: (439, 440), rule: E_VariableName, content: "j" })] }), Terminal(TerminalToken { span: (441, 443), rule: E_12_RelationalOrderingOperator, content: "< " }), NonTerminal(NonTerminalToken { span: (443, 444), rule: E_Value, subrules: [Terminal(TerminalToken { span: (443, 444), rule: E_VariableName, content: "N" })] })] }), NonTerminal(NonTerminalToken { span: (446, 449), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (446, 447), rule: E_Value, subrules: [Terminal(TerminalToken { span: (446, 447), rule: E_VariableName, content: "j" })] }), Terminal(TerminalToken { span: (447, 449), rule: E_18_PostfixOperator, content: "++" })] }), NonTerminal(NonTerminalToken { span: (451, 956), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (465, 491), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (465, 473), rule: E_Value, subrules: [Terminal(TerminalToken { span: (465, 473), rule: E_VariableName, content: "isEqualI" })] }), Terminal(TerminalToken { span: (473, 474), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (474, 475), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (474, 475), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (474, 475), rule: E_Value, subrules: [Terminal(TerminalToken { span: (474, 475), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (475, 476), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (476, 477), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (477, 478), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (477, 478), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (477, 478), rule: E_Value, subrules: [Terminal(TerminalToken { span: (477, 478), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (478, 479), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (480, 482), rule: E_4_AssignmentOperator, content: "= " }), NonTerminal(NonTerminalToken { span: (482, 489), rule: E_Value, subrules: [Terminal(TerminalToken { span: (482, 489), rule: E_VariableName, content: "IsEqual" })] }), Terminal(TerminalToken { span: (489, 490), rule: E_20_BracedOperatorOpen, content: "(" }), Terminal(TerminalToken { span: (490, 491), rule: E_20_BracedOperatorClose, content: ")" })] }), Terminal(TerminalToken { span: (491, 492), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (505, 532), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (505, 513), rule: E_Value, subrules: [Terminal(TerminalToken { span: (505, 513), rule: E_VariableName, content: "isEqualI" })] }), Terminal(TerminalToken { span: (513, 514), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (514, 515), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (514, 515), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (514, 515), rule: E_Value, subrules: [Terminal(TerminalToken { span: (514, 515), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (515, 516), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (516, 517), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (517, 518), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (517, 518), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (517, 518), rule: E_Value, subrules: [Terminal(TerminalToken { span: (517, 518), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (518, 519), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (519, 520), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (520, 522), rule: E_Value, subrules: [Terminal(TerminalToken { span: (520, 522), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (522, 523), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (523, 524), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (523, 524), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (523, 524), rule: E_Value, subrules: [Terminal(TerminalToken { span: (523, 524), rule: E_Decimal, content: "0" })] })] })] }), Terminal(TerminalToken { span: (524, 525), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (526, 529), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (530, 532), rule: E_Value, subrules: [Terminal(TerminalToken { span: (530, 532), rule: E_VariableName, content: "ii" })] })] }), Terminal(TerminalToken { span: (532, 533), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (546, 572), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (546, 554), rule: E_Value, subrules: [Terminal(TerminalToken { span: (546, 554), rule: E_VariableName, content: "isEqualI" })] }), Terminal(TerminalToken { span: (554, 555), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (555, 556), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (555, 556), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (555, 556), rule: E_Value, subrules: [Terminal(TerminalToken { span: (555, 556), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (556, 557), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (557, 558), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (558, 559), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (558, 559), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (558, 559), rule: E_Value, subrules: [Terminal(TerminalToken { span: (558, 559), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (559, 560), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (560, 561), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (561, 563), rule: E_Value, subrules: [Terminal(TerminalToken { span: (561, 563), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (563, 564), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (564, 565), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (564, 565), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (564, 565), rule: E_Value, subrules: [Terminal(TerminalToken { span: (564, 565), rule: E_Decimal, content: "1" })] })] })] }), Terminal(TerminalToken { span: (565, 566), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (567, 570), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (571, 572), rule: E_Value, subrules: [Terminal(TerminalToken { span: (571, 572), rule: E_VariableName, content: "i" })] })] }), Terminal(TerminalToken { span: (572, 573), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (587, 613), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (587, 595), rule: E_Value, subrules: [Terminal(TerminalToken { span: (587, 595), rule: E_VariableName, content: "isEqualJ" })] }), Terminal(TerminalToken { span: (595, 596), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (596, 597), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (596, 597), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (596, 597), rule: E_Value, subrules: [Terminal(TerminalToken { span: (596, 597), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (597, 598), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (598, 599), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (599, 600), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (599, 600), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (599, 600), rule: E_Value, subrules: [Terminal(TerminalToken { span: (599, 600), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (600, 601), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (602, 604), rule: E_4_AssignmentOperator, content: "= " }), NonTerminal(NonTerminalToken { span: (604, 611), rule: E_Value, subrules: [Terminal(TerminalToken { span: (604, 611), rule: E_VariableName, content: "IsEqual" })] }), Terminal(TerminalToken { span: (611, 612), rule: E_20_BracedOperatorOpen, content: "(" }), Terminal(TerminalToken { span: (612, 613), rule: E_20_BracedOperatorClose, content: ")" })] }), Terminal(TerminalToken { span: (613, 614), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (627, 654), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (627, 635), rule: E_Value, subrules: [Terminal(TerminalToken { span: (627, 635), rule: E_VariableName, content: "isEqualJ" })] }), Terminal(TerminalToken { span: (635, 636), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (636, 637), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (636, 637), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (636, 637), rule: E_Value, subrules: [Terminal(TerminalToken { span: (636, 637), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (637, 638), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (638, 639), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (639, 640), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (639, 640), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (639, 640), rule: E_Value, subrules: [Terminal(TerminalToken { span: (639, 640), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (640, 641), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (641, 642), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (642, 644), rule: E_Value, subrules: [Terminal(TerminalToken { span: (642, 644), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (644, 645), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (645, 646), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (645, 646), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (645, 646), rule: E_Value, subrules: [Terminal(TerminalToken { span: (645, 646), rule: E_Decimal, content: "0" })] })] })] }), Terminal(TerminalToken { span: (646, 647), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (648, 651), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (652, 654), rule: E_Value, subrules: [Terminal(TerminalToken { span: (652, 654), rule: E_VariableName, content: "jj" })] })] }), Terminal(TerminalToken { span: (654, 655), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (668, 694), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (668, 676), rule: E_Value, subrules: [Terminal(TerminalToken { span: (668, 676), rule: E_VariableName, content: "isEqualJ" })] }), Terminal(TerminalToken { span: (676, 677), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (677, 678), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (677, 678), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (677, 678), rule: E_Value, subrules: [Terminal(TerminalToken { span: (677, 678), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (678, 679), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (679, 680), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (680, 681), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (680, 681), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (680, 681), rule: E_Value, subrules: [Terminal(TerminalToken { span: (680, 681), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (681, 682), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (682, 683), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (683, 685), rule: E_Value, subrules: [Terminal(TerminalToken { span: (683, 685), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (685, 686), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (686, 687), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (686, 687), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (686, 687), rule: E_Value, subrules: [Terminal(TerminalToken { span: (686, 687), rule: E_Decimal, content: "1" })] })] })] }), Terminal(TerminalToken { span: (687, 688), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (689, 692), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (693, 694), rule: E_Value, subrules: [Terminal(TerminalToken { span: (693, 694), rule: E_VariableName, content: "j" })] })] }), Terminal(TerminalToken { span: (694, 695), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (709, 734), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (709, 719), rule: E_Value, subrules: [Terminal(TerminalToken { span: (709, 719), rule: E_VariableName, content: "checkField" })] }), Terminal(TerminalToken { span: (719, 720), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (720, 721), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (720, 721), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (720, 721), rule: E_Value, subrules: [Terminal(TerminalToken { span: (720, 721), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (721, 722), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (722, 723), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (723, 724), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (723, 724), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (723, 724), rule: E_Value, subrules: [Terminal(TerminalToken { span: (723, 724), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (724, 725), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (726, 728), rule: E_4_AssignmentOperator, content: "= " }), NonTerminal(NonTerminalToken { span: (728, 732), rule: E_Value, subrules: [Terminal(TerminalToken { span: (728, 732), rule: E_VariableName, content: "Mux1" })] }), Terminal(TerminalToken { span: (732, 733), rule: E_20_BracedOperatorOpen, content: "(" }), Terminal(TerminalToken { span: (733, 734), rule: E_20_BracedOperatorClose, content: ")" })] }), Terminal(TerminalToken { span: (734, 735), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (748, 775), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (748, 758), rule: E_Value, subrules: [Terminal(TerminalToken { span: (748, 758), rule: E_VariableName, content: "checkField" })] }), Terminal(TerminalToken { span: (758, 759), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (759, 760), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (759, 760), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (759, 760), rule: E_Value, subrules: [Terminal(TerminalToken { span: (759, 760), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (760, 761), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (761, 762), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (762, 763), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (762, 763), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (762, 763), rule: E_Value, subrules: [Terminal(TerminalToken { span: (762, 763), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (763, 764), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (764, 765), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (765, 766), rule: E_Value, subrules: [Terminal(TerminalToken { span: (765, 766), rule: E_VariableName, content: "c" })] }), Terminal(TerminalToken { span: (766, 767), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (767, 768), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (767, 768), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (767, 768), rule: E_Value, subrules: [Terminal(TerminalToken { span: (767, 768), rule: E_Decimal, content: "0" })] })] })] }), Terminal(TerminalToken { span: (768, 769), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (770, 773), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (774, 775), rule: E_Value, subrules: [Terminal(TerminalToken { span: (774, 775), rule: E_Decimal, content: "0" })] })] }), Terminal(TerminalToken { span: (775, 776), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (789, 826), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (789, 799), rule: E_Value, subrules: [Terminal(TerminalToken { span: (789, 799), rule: E_VariableName, content: "checkField" })] }), Terminal(TerminalToken { span: (799, 800), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (800, 801), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (800, 801), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (800, 801), rule: E_Value, subrules: [Terminal(TerminalToken { span: (800, 801), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (801, 802), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (802, 803), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (803, 804), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (803, 804), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (803, 804), rule: E_Value, subrules: [Terminal(TerminalToken { span: (803, 804), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (804, 805), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (805, 806), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (806, 807), rule: E_Value, subrules: [Terminal(TerminalToken { span: (806, 807), rule: E_VariableName, content: "c" })] }), Terminal(TerminalToken { span: (807, 808), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (808, 809), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (808, 809), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (808, 809), rule: E_Value, subrules: [Terminal(TerminalToken { span: (808, 809), rule: E_Decimal, content: "1" })] })] })] }), Terminal(TerminalToken { span: (809, 810), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (811, 814), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (815, 820), rule: E_Value, subrules: [Terminal(TerminalToken { span: (815, 820), rule: E_VariableName, content: "board" })] }), Terminal(TerminalToken { span: (820, 821), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (821, 822), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (821, 822), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (821, 822), rule: E_Value, subrules: [Terminal(TerminalToken { span: (821, 822), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (822, 823), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (823, 824), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (824, 825), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (824, 825), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (824, 825), rule: E_Value, subrules: [Terminal(TerminalToken { span: (824, 825), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (825, 826), rule: E_20_BracedOperatorClose, content: "]" })] }), Terminal(TerminalToken { span: (826, 827), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (840, 902), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (840, 850), rule: E_Value, subrules: [Terminal(TerminalToken { span: (840, 850), rule: E_VariableName, content: "checkField" })] }), Terminal(TerminalToken { span: (850, 851), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (851, 852), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (851, 852), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (851, 852), rule: E_Value, subrules: [Terminal(TerminalToken { span: (851, 852), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (852, 853), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (853, 854), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (854, 855), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (854, 855), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (854, 855), rule: E_Value, subrules: [Terminal(TerminalToken { span: (854, 855), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (855, 856), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (856, 857), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (857, 858), rule: E_Value, subrules: [Terminal(TerminalToken { span: (857, 858), rule: E_VariableName, content: "s" })] }), Terminal(TerminalToken { span: (859, 862), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (863, 871), rule: E_Value, subrules: [Terminal(TerminalToken { span: (863, 871), rule: E_VariableName, content: "isEqualI" })] }), Terminal(TerminalToken { span: (871, 872), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (872, 873), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (872, 873), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (872, 873), rule: E_Value, subrules: [Terminal(TerminalToken { span: (872, 873), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (873, 874), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (874, 875), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (875, 876), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (875, 876), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (875, 876), rule: E_Value, subrules: [Terminal(TerminalToken { span: (875, 876), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (876, 877), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (877, 878), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (878, 881), rule: E_Value, subrules: [Terminal(TerminalToken { span: (878, 881), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (882, 883), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (884, 892), rule: E_Value, subrules: [Terminal(TerminalToken { span: (884, 892), rule: E_VariableName, content: "isEqualJ" })] }), Terminal(TerminalToken { span: (892, 893), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (893, 894), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (893, 894), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (893, 894), rule: E_Value, subrules: [Terminal(TerminalToken { span: (893, 894), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (894, 895), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (895, 896), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (896, 897), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (896, 897), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (896, 897), rule: E_Value, subrules: [Terminal(TerminalToken { span: (896, 897), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (897, 898), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (898, 899), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (899, 902), rule: E_Value, subrules: [Terminal(TerminalToken { span: (899, 902), rule: E_VariableName, content: "out" })] })] }), Terminal(TerminalToken { span: (902, 903), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (916, 945), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (916, 921), rule: E_Value, subrules: [Terminal(TerminalToken { span: (916, 921), rule: E_VariableName, content: "isHit" })] }), Terminal(TerminalToken { span: (922, 924), rule: E_4_AssignmentOperator, content: "+=" }), NonTerminal(NonTerminalToken { span: (925, 935), rule: E_Value, subrules: [Terminal(TerminalToken { span: (925, 935), rule: E_VariableName, content: "checkField" })] }), Terminal(TerminalToken { span: (935, 936), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (936, 937), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (936, 937), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (936, 937), rule: E_Value, subrules: [Terminal(TerminalToken { span: (936, 937), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (937, 938), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (938, 939), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (939, 940), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (939, 940), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (939, 940), rule: E_Value, subrules: [Terminal(TerminalToken { span: (939, 940), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (940, 941), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (941, 942), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (942, 945), rule: E_Value, subrules: [Terminal(TerminalToken { span: (942, 945), rule: E_VariableName, content: "out" })] })] }), Terminal(TerminalToken { span: (945, 946), rule: END_OF_LINE, content: ";" })] })] })] })] }), NonTerminal(NonTerminalToken { span: (967, 983), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (967, 973), rule: E_Value, subrules: [Terminal(TerminalToken { span: (967, 973), rule: E_VariableName, content: "answer" })] }), Terminal(TerminalToken { span: (974, 977), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (978, 983), rule: E_Value, subrules: [Terminal(TerminalToken { span: (978, 983), rule: E_VariableName, content: "isHit" })] })] }), Terminal(TerminalToken { span: (983, 984), rule: END_OF_LINE, content: ";" })] })] }), NonTerminal(NonTerminalToken { span: (989, 1019), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (989, 999), rule: ComponentDeclarationKW, content: "component " }), Terminal(TerminalToken { span: (999, 1003), rule: E_VariableName, content: "main" }), NonTerminal(NonTerminalToken { span: (1006, 1019), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1006, 1016), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1006, 1016), rule: E_VariableName, content: "Battleship" })] }), Terminal(TerminalToken { span: (1016, 1017), rule: E_20_BracedOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (1017, 1018), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1017, 1018), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1017, 1018), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1017, 1018), rule: E_Decimal, content: "3" })] })] })] }), Terminal(TerminalToken { span: (1018, 1019), rule: E_20_BracedOperatorClose, content: ")" })] })] }), Terminal(TerminalToken { span: (1019, 1020), rule: END_OF_LINE, content: ";" }), Terminal(TerminalToken { span: (1022, 1161), rule: COMMENT, content: "/* INPUT = {\n    \"board\": [\n        [\"0\", \"0\", \"1\"], \n        [\"0\", \"1\", \"1\"], \n        [\"1\", \"1\", \"0\"]],\n    \"ii\": \"1\",\n    \"jj\": \"1\"\n}\n*/" }), Terminal(TerminalToken { span: (1161, 1161), rule: EOI, content: "" })] })]