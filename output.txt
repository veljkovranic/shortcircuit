[NonTerminal(NonTerminalToken { span: (0, 1158), rule: Circuit, subrules: [NonTerminal(NonTerminalToken { span: (0, 22), rule: CompilerDirective, subrules: [Terminal(TerminalToken { span: (0, 7), rule: PragmaKW, content: "pragma " }), Terminal(TerminalToken { span: (7, 14), rule: CircomKW, content: "circom " }), NonTerminal(NonTerminalToken { span: (14, 20), rule: E_SemVer, subrules: [Terminal(TerminalToken { span: (14, 15), rule: E_Decimal, content: "2" }), Terminal(TerminalToken { span: (16, 17), rule: E_Decimal, content: "1" }), Terminal(TerminalToken { span: (18, 19), rule: E_Decimal, content: "6" })] })] }), NonTerminal(NonTerminalToken { span: (22, 63), rule: IncludeStatement, subrules: [Terminal(TerminalToken { span: (22, 30), rule: IncludeKW, content: "include " }), NonTerminal(NonTerminalToken { span: (30, 62), rule: IncludePathString, subrules: [Terminal(TerminalToken { span: (31, 61), rule: FilesystemPath, content: "circomlib/circuits/mux1.circom" })] }), Terminal(TerminalToken { span: (62, 63), rule: END_OF_LINE, content: ";" })] }), NonTerminal(NonTerminalToken { span: (64, 112), rule: IncludeStatement, subrules: [Terminal(TerminalToken { span: (64, 72), rule: IncludeKW, content: "include " }), NonTerminal(NonTerminalToken { span: (72, 111), rule: IncludePathString, subrules: [Terminal(TerminalToken { span: (73, 110), rule: FilesystemPath, content: "circomlib/circuits/comparators.circom" })] }), Terminal(TerminalToken { span: (111, 112), rule: END_OF_LINE, content: ";" })] }), NonTerminal(NonTerminalToken { span: (114, 138), rule: TemplateBlock, subrules: [Terminal(TerminalToken { span: (114, 123), rule: TemplateKW, content: "template " }), Terminal(TerminalToken { span: (123, 126), rule: TemplateName, content: "Omg" }), NonTerminal(NonTerminalToken { span: (126, 129), rule: Parameters, subrules: [Terminal(TerminalToken { span: (127, 128), rule: VariableName, content: "B" })] }), Terminal(TerminalToken { span: (130, 138), rule: Body, content: "{\n    \n}" })] }), NonTerminal(NonTerminalToken { span: (140, 983), rule: TemplateBlock, subrules: [Terminal(TerminalToken { span: (140, 149), rule: TemplateKW, content: "template " }), Terminal(TerminalToken { span: (149, 159), rule: TemplateName, content: "Battleship" }), NonTerminal(NonTerminalToken { span: (159, 162), rule: Parameters, subrules: [Terminal(TerminalToken { span: (160, 161), rule: VariableName, content: "N" })] }), NonTerminal(NonTerminalToken { span: (163, 983), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (169, 193), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (169, 182), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (169, 176), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (176, 176), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (176, 182), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (182, 187), rule: E_VariableName, content: "board" }), NonTerminal(NonTerminalToken { span: (187, 190), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (187, 188), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (188, 189), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (188, 189), rule: E_Value, subrules: [Terminal(TerminalToken { span: (188, 189), rule: E_VariableName, content: "N" })] })] }), Terminal(TerminalToken { span: (189, 190), rule: ArrayDeclarationOperatorClose, content: "]" })] }), NonTerminal(NonTerminalToken { span: (190, 193), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (190, 191), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (191, 192), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (191, 192), rule: E_Value, subrules: [Terminal(TerminalToken { span: (191, 192), rule: E_VariableName, content: "N" })] })] }), Terminal(TerminalToken { span: (192, 193), rule: ArrayDeclarationOperatorClose, content: "]" })] })] }), Terminal(TerminalToken { span: (193, 194), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (199, 214), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (199, 212), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (199, 206), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (206, 206), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (206, 212), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (212, 214), rule: E_VariableName, content: "ii" })] }), Terminal(TerminalToken { span: (214, 215), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (220, 235), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (220, 233), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (220, 227), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (227, 227), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (227, 233), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (233, 235), rule: E_VariableName, content: "jj" })] }), Terminal(TerminalToken { span: (235, 236), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (242, 262), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (242, 256), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (242, 249), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (249, 249), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (249, 256), rule: SignalDeclarationConnectionKW, content: "output " })] }), Terminal(TerminalToken { span: (256, 262), rule: E_VariableName, content: "answer" })] }), Terminal(TerminalToken { span: (262, 263), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (269, 282), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (269, 273), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (273, 278), rule: E_VariableName, content: "isHit" }), NonTerminal(NonTerminalToken { span: (281, 282), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (281, 282), rule: E_Value, subrules: [Terminal(TerminalToken { span: (281, 282), rule: E_Decimal, content: "0" })] })] })] }), Terminal(TerminalToken { span: (282, 283), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (288, 314), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (288, 298), rule: ComponentDeclarationKW, content: "component " }), Terminal(TerminalToken { span: (298, 308), rule: E_VariableName, content: "checkField" }), NonTerminal(NonTerminalToken { span: (308, 311), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (308, 309), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (309, 310), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (309, 310), rule: E_Value, subrules: [Terminal(TerminalToken { span: (309, 310), rule: E_VariableName, content: "N" })] })] }), Terminal(TerminalToken { span: (310, 311), rule: ArrayDeclarationOperatorClose, content: "]" })] }), NonTerminal(NonTerminalToken { span: (311, 314), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (311, 312), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (312, 313), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (312, 313), rule: E_Value, subrules: [Terminal(TerminalToken { span: (312, 313), rule: E_VariableName, content: "N" })] })] }), Terminal(TerminalToken { span: (313, 314), rule: ArrayDeclarationOperatorClose, content: "]" })] })] }), Terminal(TerminalToken { span: (314, 315), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (320, 344), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (320, 330), rule: ComponentDeclarationKW, content: "component " }), Terminal(TerminalToken { span: (330, 338), rule: E_VariableName, content: "isEqualI" }), NonTerminal(NonTerminalToken { span: (338, 341), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (338, 339), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (339, 340), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (339, 340), rule: E_Value, subrules: [Terminal(TerminalToken { span: (339, 340), rule: E_VariableName, content: "N" })] })] }), Terminal(TerminalToken { span: (340, 341), rule: ArrayDeclarationOperatorClose, content: "]" })] }), NonTerminal(NonTerminalToken { span: (341, 344), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (341, 342), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (342, 343), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (342, 343), rule: E_Value, subrules: [Terminal(TerminalToken { span: (342, 343), rule: E_VariableName, content: "N" })] })] }), Terminal(TerminalToken { span: (343, 344), rule: ArrayDeclarationOperatorClose, content: "]" })] })] }), Terminal(TerminalToken { span: (344, 345), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (350, 374), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (350, 360), rule: ComponentDeclarationKW, content: "component " }), Terminal(TerminalToken { span: (360, 368), rule: E_VariableName, content: "isEqualJ" }), NonTerminal(NonTerminalToken { span: (368, 371), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (368, 369), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (369, 370), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (369, 370), rule: E_Value, subrules: [Terminal(TerminalToken { span: (369, 370), rule: E_VariableName, content: "N" })] })] }), Terminal(TerminalToken { span: (370, 371), rule: ArrayDeclarationOperatorClose, content: "]" })] }), NonTerminal(NonTerminalToken { span: (371, 374), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (371, 372), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (372, 373), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (372, 373), rule: E_Value, subrules: [Terminal(TerminalToken { span: (372, 373), rule: E_VariableName, content: "N" })] })] }), Terminal(TerminalToken { span: (373, 374), rule: ArrayDeclarationOperatorClose, content: "]" })] })] }), Terminal(TerminalToken { span: (374, 375), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (382, 959), rule: ForStatement, subrules: [Terminal(TerminalToken { span: (382, 385), rule: ForKW, content: "for" }), NonTerminal(NonTerminalToken { span: (387, 396), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (387, 391), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (391, 392), rule: E_VariableName, content: "i" }), NonTerminal(NonTerminalToken { span: (395, 396), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (395, 396), rule: E_Value, subrules: [Terminal(TerminalToken { span: (395, 396), rule: E_Decimal, content: "0" })] })] })] }), NonTerminal(NonTerminalToken { span: (398, 403), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (398, 399), rule: E_Value, subrules: [Terminal(TerminalToken { span: (398, 399), rule: E_VariableName, content: "i" })] }), Terminal(TerminalToken { span: (400, 402), rule: E_12_RelationalOrderingOperator, content: "< " }), NonTerminal(NonTerminalToken { span: (402, 403), rule: E_Value, subrules: [Terminal(TerminalToken { span: (402, 403), rule: E_VariableName, content: "N" })] })] }), NonTerminal(NonTerminalToken { span: (405, 408), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (405, 406), rule: E_Value, subrules: [Terminal(TerminalToken { span: (405, 406), rule: E_VariableName, content: "i" })] }), Terminal(TerminalToken { span: (406, 408), rule: E_18_PostfixOperator, content: "++" })] }), NonTerminal(NonTerminalToken { span: (410, 959), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (420, 953), rule: ForStatement, subrules: [Terminal(TerminalToken { span: (420, 423), rule: ForKW, content: "for" }), NonTerminal(NonTerminalToken { span: (425, 434), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (425, 429), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (429, 430), rule: E_VariableName, content: "j" }), NonTerminal(NonTerminalToken { span: (433, 434), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (433, 434), rule: E_Value, subrules: [Terminal(TerminalToken { span: (433, 434), rule: E_Decimal, content: "0" })] })] })] }), NonTerminal(NonTerminalToken { span: (436, 441), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (436, 437), rule: E_Value, subrules: [Terminal(TerminalToken { span: (436, 437), rule: E_VariableName, content: "j" })] }), Terminal(TerminalToken { span: (438, 440), rule: E_12_RelationalOrderingOperator, content: "< " }), NonTerminal(NonTerminalToken { span: (440, 441), rule: E_Value, subrules: [Terminal(TerminalToken { span: (440, 441), rule: E_VariableName, content: "N" })] })] }), NonTerminal(NonTerminalToken { span: (443, 446), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (443, 444), rule: E_Value, subrules: [Terminal(TerminalToken { span: (443, 444), rule: E_VariableName, content: "j" })] }), Terminal(TerminalToken { span: (444, 446), rule: E_18_PostfixOperator, content: "++" })] }), NonTerminal(NonTerminalToken { span: (448, 953), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (462, 488), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (462, 470), rule: E_Value, subrules: [Terminal(TerminalToken { span: (462, 470), rule: E_VariableName, content: "isEqualI" })] }), Terminal(TerminalToken { span: (470, 471), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (471, 472), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (471, 472), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (471, 472), rule: E_Value, subrules: [Terminal(TerminalToken { span: (471, 472), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (472, 473), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (473, 474), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (474, 475), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (474, 475), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (474, 475), rule: E_Value, subrules: [Terminal(TerminalToken { span: (474, 475), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (475, 476), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (477, 479), rule: E_4_AssignmentOperator, content: "= " }), NonTerminal(NonTerminalToken { span: (479, 486), rule: E_Value, subrules: [Terminal(TerminalToken { span: (479, 486), rule: E_VariableName, content: "IsEqual" })] }), Terminal(TerminalToken { span: (486, 487), rule: E_20_BracedOperatorOpen, content: "(" }), Terminal(TerminalToken { span: (487, 488), rule: E_20_BracedOperatorClose, content: ")" })] }), Terminal(TerminalToken { span: (488, 489), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (502, 529), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (502, 510), rule: E_Value, subrules: [Terminal(TerminalToken { span: (502, 510), rule: E_VariableName, content: "isEqualI" })] }), Terminal(TerminalToken { span: (510, 511), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (511, 512), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (511, 512), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (511, 512), rule: E_Value, subrules: [Terminal(TerminalToken { span: (511, 512), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (512, 513), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (513, 514), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (514, 515), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (514, 515), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (514, 515), rule: E_Value, subrules: [Terminal(TerminalToken { span: (514, 515), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (515, 516), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (516, 517), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (517, 519), rule: E_Value, subrules: [Terminal(TerminalToken { span: (517, 519), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (519, 520), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (520, 521), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (520, 521), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (520, 521), rule: E_Value, subrules: [Terminal(TerminalToken { span: (520, 521), rule: E_Decimal, content: "0" })] })] })] }), Terminal(TerminalToken { span: (521, 522), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (523, 526), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (527, 529), rule: E_Value, subrules: [Terminal(TerminalToken { span: (527, 529), rule: E_VariableName, content: "ii" })] })] }), Terminal(TerminalToken { span: (529, 530), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (543, 569), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (543, 551), rule: E_Value, subrules: [Terminal(TerminalToken { span: (543, 551), rule: E_VariableName, content: "isEqualI" })] }), Terminal(TerminalToken { span: (551, 552), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (552, 553), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (552, 553), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (552, 553), rule: E_Value, subrules: [Terminal(TerminalToken { span: (552, 553), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (553, 554), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (554, 555), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (555, 556), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (555, 556), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (555, 556), rule: E_Value, subrules: [Terminal(TerminalToken { span: (555, 556), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (556, 557), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (557, 558), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (558, 560), rule: E_Value, subrules: [Terminal(TerminalToken { span: (558, 560), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (560, 561), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (561, 562), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (561, 562), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (561, 562), rule: E_Value, subrules: [Terminal(TerminalToken { span: (561, 562), rule: E_Decimal, content: "1" })] })] })] }), Terminal(TerminalToken { span: (562, 563), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (564, 567), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (568, 569), rule: E_Value, subrules: [Terminal(TerminalToken { span: (568, 569), rule: E_VariableName, content: "i" })] })] }), Terminal(TerminalToken { span: (569, 570), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (584, 610), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (584, 592), rule: E_Value, subrules: [Terminal(TerminalToken { span: (584, 592), rule: E_VariableName, content: "isEqualJ" })] }), Terminal(TerminalToken { span: (592, 593), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (593, 594), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (593, 594), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (593, 594), rule: E_Value, subrules: [Terminal(TerminalToken { span: (593, 594), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (594, 595), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (595, 596), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (596, 597), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (596, 597), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (596, 597), rule: E_Value, subrules: [Terminal(TerminalToken { span: (596, 597), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (597, 598), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (599, 601), rule: E_4_AssignmentOperator, content: "= " }), NonTerminal(NonTerminalToken { span: (601, 608), rule: E_Value, subrules: [Terminal(TerminalToken { span: (601, 608), rule: E_VariableName, content: "IsEqual" })] }), Terminal(TerminalToken { span: (608, 609), rule: E_20_BracedOperatorOpen, content: "(" }), Terminal(TerminalToken { span: (609, 610), rule: E_20_BracedOperatorClose, content: ")" })] }), Terminal(TerminalToken { span: (610, 611), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (624, 651), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (624, 632), rule: E_Value, subrules: [Terminal(TerminalToken { span: (624, 632), rule: E_VariableName, content: "isEqualJ" })] }), Terminal(TerminalToken { span: (632, 633), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (633, 634), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (633, 634), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (633, 634), rule: E_Value, subrules: [Terminal(TerminalToken { span: (633, 634), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (634, 635), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (635, 636), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (636, 637), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (636, 637), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (636, 637), rule: E_Value, subrules: [Terminal(TerminalToken { span: (636, 637), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (637, 638), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (638, 639), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (639, 641), rule: E_Value, subrules: [Terminal(TerminalToken { span: (639, 641), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (641, 642), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (642, 643), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (642, 643), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (642, 643), rule: E_Value, subrules: [Terminal(TerminalToken { span: (642, 643), rule: E_Decimal, content: "0" })] })] })] }), Terminal(TerminalToken { span: (643, 644), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (645, 648), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (649, 651), rule: E_Value, subrules: [Terminal(TerminalToken { span: (649, 651), rule: E_VariableName, content: "jj" })] })] }), Terminal(TerminalToken { span: (651, 652), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (665, 691), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (665, 673), rule: E_Value, subrules: [Terminal(TerminalToken { span: (665, 673), rule: E_VariableName, content: "isEqualJ" })] }), Terminal(TerminalToken { span: (673, 674), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (674, 675), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (674, 675), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (674, 675), rule: E_Value, subrules: [Terminal(TerminalToken { span: (674, 675), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (675, 676), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (676, 677), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (677, 678), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (677, 678), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (677, 678), rule: E_Value, subrules: [Terminal(TerminalToken { span: (677, 678), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (678, 679), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (679, 680), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (680, 682), rule: E_Value, subrules: [Terminal(TerminalToken { span: (680, 682), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (682, 683), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (683, 684), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (683, 684), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (683, 684), rule: E_Value, subrules: [Terminal(TerminalToken { span: (683, 684), rule: E_Decimal, content: "1" })] })] })] }), Terminal(TerminalToken { span: (684, 685), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (686, 689), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (690, 691), rule: E_Value, subrules: [Terminal(TerminalToken { span: (690, 691), rule: E_VariableName, content: "j" })] })] }), Terminal(TerminalToken { span: (691, 692), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (706, 731), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (706, 716), rule: E_Value, subrules: [Terminal(TerminalToken { span: (706, 716), rule: E_VariableName, content: "checkField" })] }), Terminal(TerminalToken { span: (716, 717), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (717, 718), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (717, 718), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (717, 718), rule: E_Value, subrules: [Terminal(TerminalToken { span: (717, 718), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (718, 719), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (719, 720), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (720, 721), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (720, 721), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (720, 721), rule: E_Value, subrules: [Terminal(TerminalToken { span: (720, 721), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (721, 722), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (723, 725), rule: E_4_AssignmentOperator, content: "= " }), NonTerminal(NonTerminalToken { span: (725, 729), rule: E_Value, subrules: [Terminal(TerminalToken { span: (725, 729), rule: E_VariableName, content: "Mux1" })] }), Terminal(TerminalToken { span: (729, 730), rule: E_20_BracedOperatorOpen, content: "(" }), Terminal(TerminalToken { span: (730, 731), rule: E_20_BracedOperatorClose, content: ")" })] }), Terminal(TerminalToken { span: (731, 732), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (745, 772), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (745, 755), rule: E_Value, subrules: [Terminal(TerminalToken { span: (745, 755), rule: E_VariableName, content: "checkField" })] }), Terminal(TerminalToken { span: (755, 756), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (756, 757), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (756, 757), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (756, 757), rule: E_Value, subrules: [Terminal(TerminalToken { span: (756, 757), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (757, 758), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (758, 759), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (759, 760), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (759, 760), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (759, 760), rule: E_Value, subrules: [Terminal(TerminalToken { span: (759, 760), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (760, 761), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (761, 762), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (762, 763), rule: E_Value, subrules: [Terminal(TerminalToken { span: (762, 763), rule: E_VariableName, content: "c" })] }), Terminal(TerminalToken { span: (763, 764), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (764, 765), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (764, 765), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (764, 765), rule: E_Value, subrules: [Terminal(TerminalToken { span: (764, 765), rule: E_Decimal, content: "0" })] })] })] }), Terminal(TerminalToken { span: (765, 766), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (767, 770), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (771, 772), rule: E_Value, subrules: [Terminal(TerminalToken { span: (771, 772), rule: E_Decimal, content: "0" })] })] }), Terminal(TerminalToken { span: (772, 773), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (786, 823), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (786, 796), rule: E_Value, subrules: [Terminal(TerminalToken { span: (786, 796), rule: E_VariableName, content: "checkField" })] }), Terminal(TerminalToken { span: (796, 797), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (797, 798), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (797, 798), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (797, 798), rule: E_Value, subrules: [Terminal(TerminalToken { span: (797, 798), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (798, 799), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (799, 800), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (800, 801), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (800, 801), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (800, 801), rule: E_Value, subrules: [Terminal(TerminalToken { span: (800, 801), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (801, 802), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (802, 803), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (803, 804), rule: E_Value, subrules: [Terminal(TerminalToken { span: (803, 804), rule: E_VariableName, content: "c" })] }), Terminal(TerminalToken { span: (804, 805), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (805, 806), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (805, 806), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (805, 806), rule: E_Value, subrules: [Terminal(TerminalToken { span: (805, 806), rule: E_Decimal, content: "1" })] })] })] }), Terminal(TerminalToken { span: (806, 807), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (808, 811), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (812, 817), rule: E_Value, subrules: [Terminal(TerminalToken { span: (812, 817), rule: E_VariableName, content: "board" })] }), Terminal(TerminalToken { span: (817, 818), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (818, 819), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (818, 819), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (818, 819), rule: E_Value, subrules: [Terminal(TerminalToken { span: (818, 819), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (819, 820), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (820, 821), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (821, 822), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (821, 822), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (821, 822), rule: E_Value, subrules: [Terminal(TerminalToken { span: (821, 822), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (822, 823), rule: E_20_BracedOperatorClose, content: "]" })] }), Terminal(TerminalToken { span: (823, 824), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (837, 899), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (837, 847), rule: E_Value, subrules: [Terminal(TerminalToken { span: (837, 847), rule: E_VariableName, content: "checkField" })] }), Terminal(TerminalToken { span: (847, 848), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (848, 849), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (848, 849), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (848, 849), rule: E_Value, subrules: [Terminal(TerminalToken { span: (848, 849), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (849, 850), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (850, 851), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (851, 852), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (851, 852), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (851, 852), rule: E_Value, subrules: [Terminal(TerminalToken { span: (851, 852), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (852, 853), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (853, 854), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (854, 855), rule: E_Value, subrules: [Terminal(TerminalToken { span: (854, 855), rule: E_VariableName, content: "s" })] }), Terminal(TerminalToken { span: (856, 859), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (860, 868), rule: E_Value, subrules: [Terminal(TerminalToken { span: (860, 868), rule: E_VariableName, content: "isEqualI" })] }), Terminal(TerminalToken { span: (868, 869), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (869, 870), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (869, 870), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (869, 870), rule: E_Value, subrules: [Terminal(TerminalToken { span: (869, 870), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (870, 871), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (871, 872), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (872, 873), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (872, 873), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (872, 873), rule: E_Value, subrules: [Terminal(TerminalToken { span: (872, 873), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (873, 874), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (874, 875), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (875, 878), rule: E_Value, subrules: [Terminal(TerminalToken { span: (875, 878), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (879, 880), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (881, 889), rule: E_Value, subrules: [Terminal(TerminalToken { span: (881, 889), rule: E_VariableName, content: "isEqualJ" })] }), Terminal(TerminalToken { span: (889, 890), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (890, 891), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (890, 891), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (890, 891), rule: E_Value, subrules: [Terminal(TerminalToken { span: (890, 891), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (891, 892), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (892, 893), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (893, 894), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (893, 894), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (893, 894), rule: E_Value, subrules: [Terminal(TerminalToken { span: (893, 894), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (894, 895), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (895, 896), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (896, 899), rule: E_Value, subrules: [Terminal(TerminalToken { span: (896, 899), rule: E_VariableName, content: "out" })] })] }), Terminal(TerminalToken { span: (899, 900), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (913, 942), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (913, 918), rule: E_Value, subrules: [Terminal(TerminalToken { span: (913, 918), rule: E_VariableName, content: "isHit" })] }), Terminal(TerminalToken { span: (919, 921), rule: E_4_AssignmentOperator, content: "+=" }), NonTerminal(NonTerminalToken { span: (922, 932), rule: E_Value, subrules: [Terminal(TerminalToken { span: (922, 932), rule: E_VariableName, content: "checkField" })] }), Terminal(TerminalToken { span: (932, 933), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (933, 934), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (933, 934), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (933, 934), rule: E_Value, subrules: [Terminal(TerminalToken { span: (933, 934), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (934, 935), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (935, 936), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (936, 937), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (936, 937), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (936, 937), rule: E_Value, subrules: [Terminal(TerminalToken { span: (936, 937), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (937, 938), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (938, 939), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (939, 942), rule: E_Value, subrules: [Terminal(TerminalToken { span: (939, 942), rule: E_VariableName, content: "out" })] })] }), Terminal(TerminalToken { span: (942, 943), rule: END_OF_LINE, content: ";" })] })] })] })] }), NonTerminal(NonTerminalToken { span: (964, 980), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (964, 970), rule: E_Value, subrules: [Terminal(TerminalToken { span: (964, 970), rule: E_VariableName, content: "answer" })] }), Terminal(TerminalToken { span: (971, 974), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (975, 980), rule: E_Value, subrules: [Terminal(TerminalToken { span: (975, 980), rule: E_VariableName, content: "isHit" })] })] }), Terminal(TerminalToken { span: (980, 981), rule: END_OF_LINE, content: ";" })] })] }), NonTerminal(NonTerminalToken { span: (986, 1016), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (986, 996), rule: ComponentDeclarationKW, content: "component " }), Terminal(TerminalToken { span: (996, 1000), rule: E_VariableName, content: "main" }), NonTerminal(NonTerminalToken { span: (1003, 1016), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1003, 1013), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1003, 1013), rule: E_VariableName, content: "Battleship" })] }), Terminal(TerminalToken { span: (1013, 1014), rule: E_20_BracedOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (1014, 1015), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1014, 1015), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1014, 1015), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1014, 1015), rule: E_Decimal, content: "3" })] })] })] }), Terminal(TerminalToken { span: (1015, 1016), rule: E_20_BracedOperatorClose, content: ")" })] })] }), Terminal(TerminalToken { span: (1016, 1017), rule: END_OF_LINE, content: ";" }), Terminal(TerminalToken { span: (1019, 1158), rule: COMMENT, content: "/* INPUT = {\n    \"board\": [\n        [\"0\", \"0\", \"1\"], \n        [\"0\", \"1\", \"1\"], \n        [\"1\", \"1\", \"0\"]],\n    \"ii\": \"1\",\n    \"jj\": \"1\"\n}\n*/" }), Terminal(TerminalToken { span: (1158, 1158), rule: EOI, content: "" })] })]