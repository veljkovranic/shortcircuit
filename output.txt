[NonTerminal(NonTerminalToken { span: (0, 564), rule: Circuit, subrules: [NonTerminal(NonTerminalToken { span: (0, 21), rule: CompilerDirective, subrules: [Terminal(TerminalToken { span: (0, 7), rule: PragmaKW, content: "pragma " }), Terminal(TerminalToken { span: (7, 14), rule: CircomKW, content: "circom " }), NonTerminal(NonTerminalToken { span: (14, 20), rule: E_SemVer, subrules: [Terminal(TerminalToken { span: (14, 15), rule: E_Decimal, content: "2" }), Terminal(TerminalToken { span: (16, 17), rule: E_Decimal, content: "1" }), Terminal(TerminalToken { span: (18, 19), rule: E_Decimal, content: "6" })] })] }), NonTerminal(NonTerminalToken { span: (21, 69), rule: IncludeStatement, subrules: [Terminal(TerminalToken { span: (21, 29), rule: IncludeKW, content: "include " }), NonTerminal(NonTerminalToken { span: (29, 68), rule: IncludePathString, subrules: [Terminal(TerminalToken { span: (30, 67), rule: FilesystemPath, content: "circomlib/circuits/comparators.circom" })] }), Terminal(TerminalToken { span: (68, 69), rule: END_OF_LINE, content: ";" })] }), NonTerminal(NonTerminalToken { span: (71, 428), rule: TemplateBlock, subrules: [Terminal(TerminalToken { span: (71, 80), rule: TemplateKW, content: "template " }), Terminal(TerminalToken { span: (80, 91), rule: TemplateName, content: "Multiplier4" }), Terminal(TerminalToken { span: (91, 93), rule: Parameters, content: "()" }), NonTerminal(NonTerminalToken { span: (94, 428), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (101, 117), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (101, 114), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (101, 108), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (108, 108), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (108, 114), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (114, 117), rule: E_VariableName, content: "in1" })] }), Terminal(TerminalToken { span: (117, 118), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (124, 140), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (124, 137), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (124, 131), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (131, 131), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (131, 137), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (137, 140), rule: E_VariableName, content: "in2" })] }), Terminal(TerminalToken { span: (140, 141), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (147, 163), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (147, 160), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (147, 154), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (154, 154), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (154, 160), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (160, 163), rule: E_VariableName, content: "in3" })] }), Terminal(TerminalToken { span: (163, 164), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (170, 186), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (170, 183), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (170, 177), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (177, 177), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (177, 183), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (183, 186), rule: E_VariableName, content: "in4" })] }), Terminal(TerminalToken { span: (186, 187), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (193, 210), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (193, 206), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (193, 200), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (200, 200), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (200, 206), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (206, 210), rule: E_VariableName, content: "mult" })] }), Terminal(TerminalToken { span: (210, 211), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (217, 234), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (217, 231), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (217, 224), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (224, 224), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (224, 231), rule: SignalDeclarationConnectionKW, content: "output " })] }), Terminal(TerminalToken { span: (231, 234), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (234, 235), rule: END_OF_LINE, content: ";" }), Terminal(TerminalToken { span: (240, 269), rule: COMMENT, content: "//  signal tmp1 <== in1*in2;\n" }), Terminal(TerminalToken { span: (273, 302), rule: COMMENT, content: "//  signal tmp2 <== in3*in4;\n" }), NonTerminal(NonTerminalToken { span: (307, 336), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (307, 317), rule: ComponentDeclarationKW, content: "component " }), Terminal(TerminalToken { span: (317, 324), rule: E_VariableName, content: "isEqual" }), NonTerminal(NonTerminalToken { span: (327, 336), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (327, 334), rule: E_Value, subrules: [Terminal(TerminalToken { span: (327, 334), rule: E_VariableName, content: "IsEqual" })] }), Terminal(TerminalToken { span: (334, 335), rule: E_20_BracedOperatorOpen, content: "(" }), Terminal(TerminalToken { span: (335, 336), rule: E_20_BracedOperatorClose, content: ")" })] })] }), Terminal(TerminalToken { span: (336, 337), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (343, 365), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (343, 350), rule: E_Value, subrules: [Terminal(TerminalToken { span: (343, 350), rule: E_VariableName, content: "isEqual" })] }), Terminal(TerminalToken { span: (350, 351), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (351, 353), rule: E_Value, subrules: [Terminal(TerminalToken { span: (351, 353), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (353, 354), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (354, 355), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (354, 355), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (354, 355), rule: E_Value, subrules: [Terminal(TerminalToken { span: (354, 355), rule: E_Decimal, content: "0" })] })] })] }), Terminal(TerminalToken { span: (355, 356), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (357, 360), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (361, 365), rule: E_Value, subrules: [Terminal(TerminalToken { span: (361, 365), rule: E_VariableName, content: "mult" })] })] }), Terminal(TerminalToken { span: (365, 366), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (372, 399), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (372, 379), rule: E_Value, subrules: [Terminal(TerminalToken { span: (372, 379), rule: E_VariableName, content: "isEqual" })] }), Terminal(TerminalToken { span: (379, 380), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (380, 382), rule: E_Value, subrules: [Terminal(TerminalToken { span: (380, 382), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (382, 383), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (383, 384), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (383, 384), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (383, 384), rule: E_Value, subrules: [Terminal(TerminalToken { span: (383, 384), rule: E_Decimal, content: "1" })] })] })] }), Terminal(TerminalToken { span: (384, 385), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (386, 389), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (390, 394), rule: E_Value, subrules: [Terminal(TerminalToken { span: (390, 394), rule: E_VariableName, content: "tmp1" })] }), Terminal(TerminalToken { span: (394, 395), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (395, 399), rule: E_Value, subrules: [Terminal(TerminalToken { span: (395, 399), rule: E_VariableName, content: "tmp2" })] })] }), Terminal(TerminalToken { span: (399, 400), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (406, 425), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (406, 409), rule: E_Value, subrules: [Terminal(TerminalToken { span: (406, 409), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (410, 413), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (414, 421), rule: E_Value, subrules: [Terminal(TerminalToken { span: (414, 421), rule: E_VariableName, content: "isEqual" })] }), Terminal(TerminalToken { span: (421, 422), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (422, 425), rule: E_Value, subrules: [Terminal(TerminalToken { span: (422, 425), rule: E_VariableName, content: "out" })] })] }), Terminal(TerminalToken { span: (425, 426), rule: END_OF_LINE, content: ";" })] })] }), NonTerminal(NonTerminalToken { span: (431, 461), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (431, 441), rule: ComponentDeclarationKW, content: "component " }), Terminal(TerminalToken { span: (441, 445), rule: E_VariableName, content: "main" }), NonTerminal(NonTerminalToken { span: (448, 461), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (448, 459), rule: E_Value, subrules: [Terminal(TerminalToken { span: (448, 459), rule: E_VariableName, content: "Multiplier4" })] }), Terminal(TerminalToken { span: (459, 460), rule: E_20_BracedOperatorOpen, content: "(" }), Terminal(TerminalToken { span: (460, 461), rule: E_20_BracedOperatorClose, content: ")" })] })] }), Terminal(TerminalToken { span: (461, 462), rule: END_OF_LINE, content: ";" }), Terminal(TerminalToken { span: (465, 564), rule: COMMENT, content: "/* INPUT = {\n    \"in1\": \"5\",\n    \"in2\": \"3\",\n    \"in3\": \"5\",\n    \"in4\": \"7\",\n    \"mult\": \"525\"\n} */" }), Terminal(TerminalToken { span: (564, 564), rule: EOI, content: "" })] })][NonTerminal(NonTerminalToken { span: (0, 2802), rule: Circuit, subrules: [Terminal(TerminalToken { span: (0, 747), rule: COMMENT, content: "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of circom (Zero Knowledge Circuit Compiler).\n\n    circom is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    circom is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with circom. If not, see <https://www.gnu.org/licenses/>.\n*/" }), NonTerminal(NonTerminalToken { span: (748, 770), rule: CompilerDirective, subrules: [Terminal(TerminalToken { span: (748, 755), rule: PragmaKW, content: "pragma " }), Terminal(TerminalToken { span: (755, 762), rule: CircomKW, content: "circom " }), NonTerminal(NonTerminalToken { span: (762, 768), rule: E_SemVer, subrules: [Terminal(TerminalToken { span: (762, 763), rule: E_Decimal, content: "2" }), Terminal(TerminalToken { span: (764, 765), rule: E_Decimal, content: "0" }), Terminal(TerminalToken { span: (766, 767), rule: E_Decimal, content: "0" })] })] }), NonTerminal(NonTerminalToken { span: (770, 794), rule: IncludeStatement, subrules: [Terminal(TerminalToken { span: (770, 778), rule: IncludeKW, content: "include " }), NonTerminal(NonTerminalToken { span: (778, 793), rule: IncludePathString, subrules: [Terminal(TerminalToken { span: (779, 792), rule: FilesystemPath, content: "bitify.circom" })] }), Terminal(TerminalToken { span: (793, 794), rule: END_OF_LINE, content: ";" })] }), NonTerminal(NonTerminalToken { span: (795, 819), rule: IncludeStatement, subrules: [Terminal(TerminalToken { span: (795, 803), rule: IncludeKW, content: "include " }), NonTerminal(NonTerminalToken { span: (803, 818), rule: IncludePathString, subrules: [Terminal(TerminalToken { span: (804, 817), rule: FilesystemPath, content: "binsum.circom" })] }), Terminal(TerminalToken { span: (818, 819), rule: END_OF_LINE, content: ";" })] }), NonTerminal(NonTerminalToken { span: (821, 977), rule: TemplateBlock, subrules: [Terminal(TerminalToken { span: (821, 830), rule: TemplateKW, content: "template " }), Terminal(TerminalToken { span: (830, 836), rule: TemplateName, content: "IsZero" }), Terminal(TerminalToken { span: (836, 838), rule: Parameters, content: "()" }), NonTerminal(NonTerminalToken { span: (839, 977), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (845, 860), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (845, 858), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (845, 852), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (852, 852), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (852, 858), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (858, 860), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (860, 861), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (866, 883), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (866, 880), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (866, 873), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (873, 873), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (873, 880), rule: SignalDeclarationConnectionKW, content: "output " })] }), Terminal(TerminalToken { span: (880, 883), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (883, 884), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (890, 900), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (890, 897), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (890, 897), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (897, 897), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (897, 897), rule: SignalDeclarationConnectionKW, content: "" })] }), Terminal(TerminalToken { span: (897, 900), rule: E_VariableName, content: "inv" })] }), Terminal(TerminalToken { span: (900, 901), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (907, 931), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (907, 910), rule: E_Value, subrules: [Terminal(TerminalToken { span: (907, 910), rule: E_VariableName, content: "inv" })] }), Terminal(TerminalToken { span: (911, 914), rule: E_2_SignalLeftHandOperator, content: "<--" }), NonTerminal(NonTerminalToken { span: (915, 917), rule: E_Value, subrules: [Terminal(TerminalToken { span: (915, 917), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (917, 919), rule: E_11_RelationalEqualityOperator, content: "!=" }), NonTerminal(NonTerminalToken { span: (919, 920), rule: E_Value, subrules: [Terminal(TerminalToken { span: (919, 920), rule: E_Decimal, content: "0" })] }), Terminal(TerminalToken { span: (921, 922), rule: E_5_TernaryFirstOperator, content: "?" }), NonTerminal(NonTerminalToken { span: (923, 924), rule: E_Value, subrules: [Terminal(TerminalToken { span: (923, 924), rule: E_Decimal, content: "1" })] }), Terminal(TerminalToken { span: (924, 925), rule: E_15_ProductOperator, content: "/" }), NonTerminal(NonTerminalToken { span: (925, 927), rule: E_Value, subrules: [Terminal(TerminalToken { span: (925, 927), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (928, 929), rule: E_5_TernarySecondOperator, content: ":" }), NonTerminal(NonTerminalToken { span: (930, 931), rule: E_Value, subrules: [Terminal(TerminalToken { span: (930, 931), rule: E_Decimal, content: "0" })] })] }), Terminal(TerminalToken { span: (931, 932), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (938, 956), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (938, 941), rule: E_Value, subrules: [Terminal(TerminalToken { span: (938, 941), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (942, 945), rule: E_2_SignalLeftHandOperator, content: "<==" }), Terminal(TerminalToken { span: (946, 947), rule: E_17_PrefixOperator, content: "-" }), NonTerminal(NonTerminalToken { span: (947, 949), rule: E_Value, subrules: [Terminal(TerminalToken { span: (947, 949), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (949, 950), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (950, 953), rule: E_Value, subrules: [Terminal(TerminalToken { span: (950, 953), rule: E_VariableName, content: "inv" })] }), Terminal(TerminalToken { span: (954, 955), rule: E_14_SumOperator, content: "+" }), NonTerminal(NonTerminalToken { span: (955, 956), rule: E_Value, subrules: [Terminal(TerminalToken { span: (955, 956), rule: E_Decimal, content: "1" })] })] }), Terminal(TerminalToken { span: (956, 957), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (962, 974), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (962, 964), rule: E_Value, subrules: [Terminal(TerminalToken { span: (962, 964), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (964, 965), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (965, 968), rule: E_Value, subrules: [Terminal(TerminalToken { span: (965, 968), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (969, 972), rule: E_1_SignalAssertionConstraintOperator, content: "===" }), NonTerminal(NonTerminalToken { span: (973, 974), rule: E_Value, subrules: [Terminal(TerminalToken { span: (973, 974), rule: E_Decimal, content: "0" })] })] }), Terminal(TerminalToken { span: (974, 975), rule: END_OF_LINE, content: ";" })] })] }), NonTerminal(NonTerminalToken { span: (980, 1133), rule: TemplateBlock, subrules: [Terminal(TerminalToken { span: (980, 989), rule: TemplateKW, content: "template " }), Terminal(TerminalToken { span: (989, 996), rule: TemplateName, content: "IsEqual" }), Terminal(TerminalToken { span: (996, 998), rule: Parameters, content: "()" }), NonTerminal(NonTerminalToken { span: (999, 1133), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (1005, 1023), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (1005, 1018), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (1005, 1012), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (1012, 1012), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (1012, 1018), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (1018, 1020), rule: E_VariableName, content: "in" }), NonTerminal(NonTerminalToken { span: (1020, 1023), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (1020, 1021), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1021, 1022), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1021, 1022), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1021, 1022), rule: E_Decimal, content: "2" })] })] }), Terminal(TerminalToken { span: (1022, 1023), rule: ArrayDeclarationOperatorClose, content: "]" })] })] }), Terminal(TerminalToken { span: (1023, 1024), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1029, 1046), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (1029, 1043), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (1029, 1036), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (1036, 1036), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (1036, 1043), rule: SignalDeclarationConnectionKW, content: "output " })] }), Terminal(TerminalToken { span: (1043, 1046), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (1046, 1047), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1053, 1077), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1053, 1063), rule: ComponentDeclarationKW, content: "component " }), Terminal(TerminalToken { span: (1063, 1066), rule: E_VariableName, content: "isz" }), NonTerminal(NonTerminalToken { span: (1069, 1077), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1069, 1075), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1069, 1075), rule: E_VariableName, content: "IsZero" })] }), Terminal(TerminalToken { span: (1075, 1076), rule: E_20_BracedOperatorOpen, content: "(" }), Terminal(TerminalToken { span: (1076, 1077), rule: E_20_BracedOperatorClose, content: ")" })] })] }), Terminal(TerminalToken { span: (1077, 1078), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1084, 1108), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1084, 1086), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1084, 1086), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (1086, 1087), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1087, 1088), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1087, 1088), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1087, 1088), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1087, 1088), rule: E_Decimal, content: "1" })] })] })] }), Terminal(TerminalToken { span: (1088, 1089), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (1090, 1091), rule: E_14_SumOperator, content: "-" }), NonTerminal(NonTerminalToken { span: (1092, 1094), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1092, 1094), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (1094, 1095), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1095, 1096), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1095, 1096), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1095, 1096), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1095, 1096), rule: E_Decimal, content: "0" })] })] })] }), Terminal(TerminalToken { span: (1096, 1097), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (1098, 1101), rule: E_3_SignalRightHandOperator, content: "==>" }), NonTerminal(NonTerminalToken { span: (1102, 1105), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1102, 1105), rule: E_VariableName, content: "isz" })] }), Terminal(TerminalToken { span: (1105, 1106), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (1106, 1108), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1106, 1108), rule: E_VariableName, content: "in" })] })] }), Terminal(TerminalToken { span: (1108, 1109), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1115, 1130), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1115, 1118), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1115, 1118), rule: E_VariableName, content: "isz" })] }), Terminal(TerminalToken { span: (1118, 1119), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (1119, 1122), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1119, 1122), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (1123, 1126), rule: E_3_SignalRightHandOperator, content: "==>" }), NonTerminal(NonTerminalToken { span: (1127, 1130), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1127, 1130), rule: E_VariableName, content: "out" })] })] }), Terminal(TerminalToken { span: (1130, 1131), rule: END_OF_LINE, content: ";" })] })] }), NonTerminal(NonTerminalToken { span: (1135, 1315), rule: TemplateBlock, subrules: [Terminal(TerminalToken { span: (1135, 1144), rule: TemplateKW, content: "template " }), Terminal(TerminalToken { span: (1144, 1163), rule: TemplateName, content: "ForceEqualIfEnabled" }), Terminal(TerminalToken { span: (1163, 1165), rule: Parameters, content: "()" }), NonTerminal(NonTerminalToken { span: (1166, 1315), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (1172, 1192), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (1172, 1185), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (1172, 1179), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (1179, 1179), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (1179, 1185), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (1185, 1192), rule: E_VariableName, content: "enabled" })] }), Terminal(TerminalToken { span: (1192, 1193), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1198, 1216), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (1198, 1211), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (1198, 1205), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (1205, 1205), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (1205, 1211), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (1211, 1213), rule: E_VariableName, content: "in" }), NonTerminal(NonTerminalToken { span: (1213, 1216), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (1213, 1214), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1214, 1215), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1214, 1215), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1214, 1215), rule: E_Decimal, content: "2" })] })] }), Terminal(TerminalToken { span: (1215, 1216), rule: ArrayDeclarationOperatorClose, content: "]" })] })] }), Terminal(TerminalToken { span: (1216, 1217), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1223, 1247), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1223, 1233), rule: ComponentDeclarationKW, content: "component " }), Terminal(TerminalToken { span: (1233, 1236), rule: E_VariableName, content: "isz" }), NonTerminal(NonTerminalToken { span: (1239, 1247), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1239, 1245), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1239, 1245), rule: E_VariableName, content: "IsZero" })] }), Terminal(TerminalToken { span: (1245, 1246), rule: E_20_BracedOperatorOpen, content: "(" }), Terminal(TerminalToken { span: (1246, 1247), rule: E_20_BracedOperatorClose, content: ")" })] })] }), Terminal(TerminalToken { span: (1247, 1248), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1254, 1278), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1254, 1256), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1254, 1256), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (1256, 1257), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1257, 1258), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1257, 1258), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1257, 1258), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1257, 1258), rule: E_Decimal, content: "1" })] })] })] }), Terminal(TerminalToken { span: (1258, 1259), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (1260, 1261), rule: E_14_SumOperator, content: "-" }), NonTerminal(NonTerminalToken { span: (1262, 1264), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1262, 1264), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (1264, 1265), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1265, 1266), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1265, 1266), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1265, 1266), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1265, 1266), rule: E_Decimal, content: "0" })] })] })] }), Terminal(TerminalToken { span: (1266, 1267), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (1268, 1271), rule: E_3_SignalRightHandOperator, content: "==>" }), NonTerminal(NonTerminalToken { span: (1272, 1275), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1272, 1275), rule: E_VariableName, content: "isz" })] }), Terminal(TerminalToken { span: (1275, 1276), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (1276, 1278), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1276, 1278), rule: E_VariableName, content: "in" })] })] }), Terminal(TerminalToken { span: (1278, 1279), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1285, 1312), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1285, 1298), rule: E_Value, subrules: [NonTerminal(NonTerminalToken { span: (1285, 1298), rule: E_Brackets, subrules: [Terminal(TerminalToken { span: (1285, 1286), rule: E_BracketsOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (1286, 1297), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1286, 1287), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1286, 1287), rule: E_Decimal, content: "1" })] }), Terminal(TerminalToken { span: (1288, 1289), rule: E_14_SumOperator, content: "-" }), NonTerminal(NonTerminalToken { span: (1290, 1293), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1290, 1293), rule: E_VariableName, content: "isz" })] }), Terminal(TerminalToken { span: (1293, 1294), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (1294, 1297), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1294, 1297), rule: E_VariableName, content: "out" })] })] }), Terminal(TerminalToken { span: (1297, 1298), rule: E_BracketsOperatorclose, content: ")" })] })] }), Terminal(TerminalToken { span: (1298, 1299), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (1299, 1306), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1299, 1306), rule: E_VariableName, content: "enabled" })] }), Terminal(TerminalToken { span: (1307, 1310), rule: E_1_SignalAssertionConstraintOperator, content: "===" }), NonTerminal(NonTerminalToken { span: (1311, 1312), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1311, 1312), rule: E_Decimal, content: "0" })] })] }), Terminal(TerminalToken { span: (1312, 1313), rule: END_OF_LINE, content: ";" })] })] }), Terminal(TerminalToken { span: (1317, 1846), rule: COMMENT, content: "/*\n// N is the number of bits the input  have.\n// The MSF is the sign bit.\ntemplate LessThan(n) {\n    signal input in[2];\n    signal output out;\n\n    component num2Bits0;\n    component num2Bits1;\n\n    component adder;\n\n    adder = BinSum(n, 2);\n\n    num2Bits0 = Num2Bits(n);\n    num2Bits1 = Num2BitsNeg(n);\n\n    in[0] ==> num2Bits0.in;\n    in[1] ==> num2Bits1.in;\n\n    var i;\n    for (i=0;i<n;i++) {\n        num2Bits0.out[i] ==> adder.in[0][i];\n        num2Bits1.out[i] ==> adder.in[1][i];\n    }\n\n    adder.out[n-1] ==> out;\n}\n*/" }), NonTerminal(NonTerminalToken { span: (1848, 2043), rule: TemplateBlock, subrules: [Terminal(TerminalToken { span: (1848, 1857), rule: TemplateKW, content: "template " }), Terminal(TerminalToken { span: (1857, 1865), rule: TemplateName, content: "LessThan" }), NonTerminal(NonTerminalToken { span: (1865, 1868), rule: Parameters, subrules: [Terminal(TerminalToken { span: (1866, 1867), rule: VariableName, content: "n" })] }), NonTerminal(NonTerminalToken { span: (1869, 2043), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (1875, 1891), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1875, 1881), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1875, 1881), rule: E_VariableName, content: "assert" })] }), Terminal(TerminalToken { span: (1881, 1882), rule: E_20_BracedOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (1882, 1890), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1882, 1890), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1882, 1883), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1882, 1883), rule: E_VariableName, content: "n" })] }), Terminal(TerminalToken { span: (1884, 1887), rule: E_12_RelationalOrderingOperator, content: "<= " }), NonTerminal(NonTerminalToken { span: (1887, 1890), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1887, 1890), rule: E_Decimal, content: "252" })] })] })] }), Terminal(TerminalToken { span: (1890, 1891), rule: E_20_BracedOperatorClose, content: ")" })] }), Terminal(TerminalToken { span: (1891, 1892), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1897, 1915), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (1897, 1910), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (1897, 1904), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (1904, 1904), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (1904, 1910), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (1910, 1912), rule: E_VariableName, content: "in" }), NonTerminal(NonTerminalToken { span: (1912, 1915), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (1912, 1913), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1913, 1914), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1913, 1914), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1913, 1914), rule: E_Decimal, content: "2" })] })] }), Terminal(TerminalToken { span: (1914, 1915), rule: ArrayDeclarationOperatorClose, content: "]" })] })] }), Terminal(TerminalToken { span: (1915, 1916), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1921, 1938), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (1921, 1935), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (1921, 1928), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (1928, 1928), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (1928, 1935), rule: SignalDeclarationConnectionKW, content: "output " })] }), Terminal(TerminalToken { span: (1935, 1938), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (1938, 1939), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1945, 1974), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1945, 1955), rule: ComponentDeclarationKW, content: "component " }), Terminal(TerminalToken { span: (1955, 1958), rule: E_VariableName, content: "n2b" }), NonTerminal(NonTerminalToken { span: (1961, 1974), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1961, 1969), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1961, 1969), rule: E_VariableName, content: "Num2Bits" })] }), Terminal(TerminalToken { span: (1969, 1970), rule: E_20_BracedOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (1970, 1973), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1970, 1973), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1970, 1971), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1970, 1971), rule: E_VariableName, content: "n" })] }), Terminal(TerminalToken { span: (1971, 1972), rule: E_14_SumOperator, content: "+" }), NonTerminal(NonTerminalToken { span: (1972, 1973), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1972, 1973), rule: E_Decimal, content: "1" })] })] })] }), Terminal(TerminalToken { span: (1973, 1974), rule: E_20_BracedOperatorClose, content: ")" })] })] }), Terminal(TerminalToken { span: (1974, 1975), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1981, 2013), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1981, 1984), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1981, 1984), rule: E_VariableName, content: "n2b" })] }), Terminal(TerminalToken { span: (1984, 1985), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (1985, 1987), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1985, 1987), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (1988, 1991), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (1992, 1994), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1992, 1994), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (1994, 1995), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1995, 1996), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1995, 1996), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1995, 1996), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1995, 1996), rule: E_Decimal, content: "0" })] })] })] }), Terminal(TerminalToken { span: (1996, 1997), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (1997, 1998), rule: E_14_SumOperator, content: "+" }), NonTerminal(NonTerminalToken { span: (1999, 2005), rule: E_Value, subrules: [NonTerminal(NonTerminalToken { span: (1999, 2005), rule: E_Brackets, subrules: [Terminal(TerminalToken { span: (1999, 2000), rule: E_BracketsOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (2000, 2004), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2000, 2001), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2000, 2001), rule: E_Decimal, content: "1" })] }), Terminal(TerminalToken { span: (2001, 2003), rule: E_13_BitwiseShiftOperator, content: "<<" }), NonTerminal(NonTerminalToken { span: (2003, 2004), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2003, 2004), rule: E_VariableName, content: "n" })] })] }), Terminal(TerminalToken { span: (2004, 2005), rule: E_BracketsOperatorclose, content: ")" })] })] }), Terminal(TerminalToken { span: (2006, 2007), rule: E_14_SumOperator, content: "-" }), NonTerminal(NonTerminalToken { span: (2008, 2010), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2008, 2010), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (2010, 2011), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (2011, 2012), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (2011, 2012), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2011, 2012), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2011, 2012), rule: E_Decimal, content: "1" })] })] })] }), Terminal(TerminalToken { span: (2012, 2013), rule: E_20_BracedOperatorClose, content: "]" })] }), Terminal(TerminalToken { span: (2013, 2014), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (2020, 2040), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2020, 2023), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2020, 2023), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (2024, 2027), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (2028, 2029), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2028, 2029), rule: E_Decimal, content: "1" })] }), Terminal(TerminalToken { span: (2029, 2030), rule: E_14_SumOperator, content: "-" }), NonTerminal(NonTerminalToken { span: (2030, 2033), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2030, 2033), rule: E_VariableName, content: "n2b" })] }), Terminal(TerminalToken { span: (2033, 2034), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (2034, 2037), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2034, 2037), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (2037, 2038), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (2038, 2039), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (2038, 2039), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2038, 2039), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2038, 2039), rule: E_VariableName, content: "n" })] })] })] }), Terminal(TerminalToken { span: (2039, 2040), rule: E_20_BracedOperatorClose, content: "]" })] }), Terminal(TerminalToken { span: (2040, 2041), rule: END_OF_LINE, content: ";" })] })] }), Terminal(TerminalToken { span: (2047, 2091), rule: COMMENT, content: "// N is the number of bits the input  have.\n" }), Terminal(TerminalToken { span: (2091, 2119), rule: COMMENT, content: "// The MSF is the sign bit.\n" }), NonTerminal(NonTerminalToken { span: (2119, 2296), rule: TemplateBlock, subrules: [Terminal(TerminalToken { span: (2119, 2128), rule: TemplateKW, content: "template " }), Terminal(TerminalToken { span: (2128, 2138), rule: TemplateName, content: "LessEqThan" }), NonTerminal(NonTerminalToken { span: (2138, 2141), rule: Parameters, subrules: [Terminal(TerminalToken { span: (2139, 2140), rule: VariableName, content: "n" })] }), NonTerminal(NonTerminalToken { span: (2142, 2296), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (2148, 2166), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (2148, 2161), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (2148, 2155), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (2155, 2155), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (2155, 2161), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (2161, 2163), rule: E_VariableName, content: "in" }), NonTerminal(NonTerminalToken { span: (2163, 2166), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (2163, 2164), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (2164, 2165), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2164, 2165), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2164, 2165), rule: E_Decimal, content: "2" })] })] }), Terminal(TerminalToken { span: (2165, 2166), rule: ArrayDeclarationOperatorClose, content: "]" })] })] }), Terminal(TerminalToken { span: (2166, 2167), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (2172, 2189), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (2172, 2186), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (2172, 2179), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (2179, 2179), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (2179, 2186), rule: SignalDeclarationConnectionKW, content: "output " })] }), Terminal(TerminalToken { span: (2186, 2189), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (2189, 2190), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (2196, 2222), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (2196, 2206), rule: ComponentDeclarationKW, content: "component " }), Terminal(TerminalToken { span: (2206, 2208), rule: E_VariableName, content: "lt" }), NonTerminal(NonTerminalToken { span: (2211, 2222), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2211, 2219), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2211, 2219), rule: E_VariableName, content: "LessThan" })] }), Terminal(TerminalToken { span: (2219, 2220), rule: E_20_BracedOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (2220, 2221), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (2220, 2221), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2220, 2221), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2220, 2221), rule: E_VariableName, content: "n" })] })] })] }), Terminal(TerminalToken { span: (2221, 2222), rule: E_20_BracedOperatorClose, content: ")" })] })] }), Terminal(TerminalToken { span: (2222, 2223), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (2229, 2247), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2229, 2231), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2229, 2231), rule: E_VariableName, content: "lt" })] }), Terminal(TerminalToken { span: (2231, 2232), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (2232, 2234), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2232, 2234), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (2234, 2235), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (2235, 2236), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (2235, 2236), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2235, 2236), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2235, 2236), rule: E_Decimal, content: "0" })] })] })] }), Terminal(TerminalToken { span: (2236, 2237), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (2238, 2241), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (2242, 2244), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2242, 2244), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (2244, 2245), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (2245, 2246), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (2245, 2246), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2245, 2246), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2245, 2246), rule: E_Decimal, content: "0" })] })] })] }), Terminal(TerminalToken { span: (2246, 2247), rule: E_20_BracedOperatorClose, content: "]" })] }), Terminal(TerminalToken { span: (2247, 2248), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (2253, 2273), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2253, 2255), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2253, 2255), rule: E_VariableName, content: "lt" })] }), Terminal(TerminalToken { span: (2255, 2256), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (2256, 2258), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2256, 2258), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (2258, 2259), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (2259, 2260), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (2259, 2260), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2259, 2260), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2259, 2260), rule: E_Decimal, content: "1" })] })] })] }), Terminal(TerminalToken { span: (2260, 2261), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (2262, 2265), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (2266, 2268), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2266, 2268), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (2268, 2269), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (2269, 2270), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (2269, 2270), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2269, 2270), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2269, 2270), rule: E_Decimal, content: "1" })] })] })] }), Terminal(TerminalToken { span: (2270, 2271), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (2271, 2272), rule: E_14_SumOperator, content: "+" }), NonTerminal(NonTerminalToken { span: (2272, 2273), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2272, 2273), rule: E_Decimal, content: "1" })] })] }), Terminal(TerminalToken { span: (2273, 2274), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (2279, 2293), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2279, 2281), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2279, 2281), rule: E_VariableName, content: "lt" })] }), Terminal(TerminalToken { span: (2281, 2282), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (2282, 2285), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2282, 2285), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (2286, 2289), rule: E_3_SignalRightHandOperator, content: "==>" }), NonTerminal(NonTerminalToken { span: (2290, 2293), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2290, 2293), rule: E_VariableName, content: "out" })] })] }), Terminal(TerminalToken { span: (2293, 2294), rule: END_OF_LINE, content: ";" })] })] }), Terminal(TerminalToken { span: (2298, 2342), rule: COMMENT, content: "// N is the number of bits the input  have.\n" }), Terminal(TerminalToken { span: (2342, 2370), rule: COMMENT, content: "// The MSF is the sign bit.\n" }), NonTerminal(NonTerminalToken { span: (2370, 2546), rule: TemplateBlock, subrules: [Terminal(TerminalToken { span: (2370, 2379), rule: TemplateKW, content: "template " }), Terminal(TerminalToken { span: (2379, 2390), rule: TemplateName, content: "GreaterThan" }), NonTerminal(NonTerminalToken { span: (2390, 2393), rule: Parameters, subrules: [Terminal(TerminalToken { span: (2391, 2392), rule: VariableName, content: "n" })] }), NonTerminal(NonTerminalToken { span: (2394, 2546), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (2400, 2418), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (2400, 2413), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (2400, 2407), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (2407, 2407), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (2407, 2413), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (2413, 2415), rule: E_VariableName, content: "in" }), NonTerminal(NonTerminalToken { span: (2415, 2418), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (2415, 2416), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (2416, 2417), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2416, 2417), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2416, 2417), rule: E_Decimal, content: "2" })] })] }), Terminal(TerminalToken { span: (2417, 2418), rule: ArrayDeclarationOperatorClose, content: "]" })] })] }), Terminal(TerminalToken { span: (2418, 2419), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (2424, 2441), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (2424, 2438), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (2424, 2431), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (2431, 2431), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (2431, 2438), rule: SignalDeclarationConnectionKW, content: "output " })] }), Terminal(TerminalToken { span: (2438, 2441), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (2441, 2442), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (2448, 2474), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (2448, 2458), rule: ComponentDeclarationKW, content: "component " }), Terminal(TerminalToken { span: (2458, 2460), rule: E_VariableName, content: "lt" }), NonTerminal(NonTerminalToken { span: (2463, 2474), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2463, 2471), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2463, 2471), rule: E_VariableName, content: "LessThan" })] }), Terminal(TerminalToken { span: (2471, 2472), rule: E_20_BracedOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (2472, 2473), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (2472, 2473), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2472, 2473), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2472, 2473), rule: E_VariableName, content: "n" })] })] })] }), Terminal(TerminalToken { span: (2473, 2474), rule: E_20_BracedOperatorClose, content: ")" })] })] }), Terminal(TerminalToken { span: (2474, 2475), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (2481, 2499), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2481, 2483), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2481, 2483), rule: E_VariableName, content: "lt" })] }), Terminal(TerminalToken { span: (2483, 2484), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (2484, 2486), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2484, 2486), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (2486, 2487), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (2487, 2488), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (2487, 2488), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2487, 2488), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2487, 2488), rule: E_Decimal, content: "0" })] })] })] }), Terminal(TerminalToken { span: (2488, 2489), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (2490, 2493), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (2494, 2496), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2494, 2496), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (2496, 2497), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (2497, 2498), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (2497, 2498), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2497, 2498), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2497, 2498), rule: E_Decimal, content: "1" })] })] })] }), Terminal(TerminalToken { span: (2498, 2499), rule: E_20_BracedOperatorClose, content: "]" })] }), Terminal(TerminalToken { span: (2499, 2500), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (2505, 2523), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2505, 2507), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2505, 2507), rule: E_VariableName, content: "lt" })] }), Terminal(TerminalToken { span: (2507, 2508), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (2508, 2510), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2508, 2510), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (2510, 2511), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (2511, 2512), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (2511, 2512), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2511, 2512), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2511, 2512), rule: E_Decimal, content: "1" })] })] })] }), Terminal(TerminalToken { span: (2512, 2513), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (2514, 2517), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (2518, 2520), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2518, 2520), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (2520, 2521), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (2521, 2522), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (2521, 2522), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2521, 2522), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2521, 2522), rule: E_Decimal, content: "0" })] })] })] }), Terminal(TerminalToken { span: (2522, 2523), rule: E_20_BracedOperatorClose, content: "]" })] }), Terminal(TerminalToken { span: (2523, 2524), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (2529, 2543), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2529, 2531), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2529, 2531), rule: E_VariableName, content: "lt" })] }), Terminal(TerminalToken { span: (2531, 2532), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (2532, 2535), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2532, 2535), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (2536, 2539), rule: E_3_SignalRightHandOperator, content: "==>" }), NonTerminal(NonTerminalToken { span: (2540, 2543), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2540, 2543), rule: E_VariableName, content: "out" })] })] }), Terminal(TerminalToken { span: (2543, 2544), rule: END_OF_LINE, content: ";" })] })] }), Terminal(TerminalToken { span: (2548, 2592), rule: COMMENT, content: "// N is the number of bits the input  have.\n" }), Terminal(TerminalToken { span: (2592, 2620), rule: COMMENT, content: "// The MSF is the sign bit.\n" }), NonTerminal(NonTerminalToken { span: (2620, 2800), rule: TemplateBlock, subrules: [Terminal(TerminalToken { span: (2620, 2629), rule: TemplateKW, content: "template " }), Terminal(TerminalToken { span: (2629, 2642), rule: TemplateName, content: "GreaterEqThan" }), NonTerminal(NonTerminalToken { span: (2642, 2645), rule: Parameters, subrules: [Terminal(TerminalToken { span: (2643, 2644), rule: VariableName, content: "n" })] }), NonTerminal(NonTerminalToken { span: (2646, 2800), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (2652, 2670), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (2652, 2665), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (2652, 2659), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (2659, 2659), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (2659, 2665), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (2665, 2667), rule: E_VariableName, content: "in" }), NonTerminal(NonTerminalToken { span: (2667, 2670), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (2667, 2668), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (2668, 2669), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2668, 2669), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2668, 2669), rule: E_Decimal, content: "2" })] })] }), Terminal(TerminalToken { span: (2669, 2670), rule: ArrayDeclarationOperatorClose, content: "]" })] })] }), Terminal(TerminalToken { span: (2670, 2671), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (2676, 2693), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (2676, 2690), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (2676, 2683), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (2683, 2683), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (2683, 2690), rule: SignalDeclarationConnectionKW, content: "output " })] }), Terminal(TerminalToken { span: (2690, 2693), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (2693, 2694), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (2700, 2726), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (2700, 2710), rule: ComponentDeclarationKW, content: "component " }), Terminal(TerminalToken { span: (2710, 2712), rule: E_VariableName, content: "lt" }), NonTerminal(NonTerminalToken { span: (2715, 2726), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2715, 2723), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2715, 2723), rule: E_VariableName, content: "LessThan" })] }), Terminal(TerminalToken { span: (2723, 2724), rule: E_20_BracedOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (2724, 2725), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (2724, 2725), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2724, 2725), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2724, 2725), rule: E_VariableName, content: "n" })] })] })] }), Terminal(TerminalToken { span: (2725, 2726), rule: E_20_BracedOperatorClose, content: ")" })] })] }), Terminal(TerminalToken { span: (2726, 2727), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (2733, 2751), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2733, 2735), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2733, 2735), rule: E_VariableName, content: "lt" })] }), Terminal(TerminalToken { span: (2735, 2736), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (2736, 2738), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2736, 2738), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (2738, 2739), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (2739, 2740), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (2739, 2740), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2739, 2740), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2739, 2740), rule: E_Decimal, content: "0" })] })] })] }), Terminal(TerminalToken { span: (2740, 2741), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (2742, 2745), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (2746, 2748), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2746, 2748), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (2748, 2749), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (2749, 2750), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (2749, 2750), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2749, 2750), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2749, 2750), rule: E_Decimal, content: "1" })] })] })] }), Terminal(TerminalToken { span: (2750, 2751), rule: E_20_BracedOperatorClose, content: "]" })] }), Terminal(TerminalToken { span: (2751, 2752), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (2757, 2777), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2757, 2759), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2757, 2759), rule: E_VariableName, content: "lt" })] }), Terminal(TerminalToken { span: (2759, 2760), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (2760, 2762), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2760, 2762), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (2762, 2763), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (2763, 2764), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (2763, 2764), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2763, 2764), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2763, 2764), rule: E_Decimal, content: "1" })] })] })] }), Terminal(TerminalToken { span: (2764, 2765), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (2766, 2769), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (2770, 2772), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2770, 2772), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (2772, 2773), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (2773, 2774), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (2773, 2774), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2773, 2774), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2773, 2774), rule: E_Decimal, content: "0" })] })] })] }), Terminal(TerminalToken { span: (2774, 2775), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (2775, 2776), rule: E_14_SumOperator, content: "+" }), NonTerminal(NonTerminalToken { span: (2776, 2777), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2776, 2777), rule: E_Decimal, content: "1" })] })] }), Terminal(TerminalToken { span: (2777, 2778), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (2783, 2797), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2783, 2785), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2783, 2785), rule: E_VariableName, content: "lt" })] }), Terminal(TerminalToken { span: (2785, 2786), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (2786, 2789), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2786, 2789), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (2790, 2793), rule: E_3_SignalRightHandOperator, content: "==>" }), NonTerminal(NonTerminalToken { span: (2794, 2797), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2794, 2797), rule: E_VariableName, content: "out" })] })] }), Terminal(TerminalToken { span: (2797, 2798), rule: END_OF_LINE, content: ";" })] })] }), Terminal(TerminalToken { span: (2802, 2802), rule: EOI, content: "" })] })][NonTerminal(NonTerminalToken { span: (0, 1823), rule: Circuit, subrules: [Terminal(TerminalToken { span: (0, 747), rule: COMMENT, content: "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of circom (Zero Knowledge Circuit Compiler).\n\n    circom is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    circom is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with circom. If not, see <https://www.gnu.org/licenses/>.\n*/" }), NonTerminal(NonTerminalToken { span: (748, 770), rule: CompilerDirective, subrules: [Terminal(TerminalToken { span: (748, 755), rule: PragmaKW, content: "pragma " }), Terminal(TerminalToken { span: (755, 762), rule: CircomKW, content: "circom " }), NonTerminal(NonTerminalToken { span: (762, 768), rule: E_SemVer, subrules: [Terminal(TerminalToken { span: (762, 763), rule: E_Decimal, content: "2" }), Terminal(TerminalToken { span: (764, 765), rule: E_Decimal, content: "0" }), Terminal(TerminalToken { span: (766, 767), rule: E_Decimal, content: "0" })] })] }), NonTerminal(NonTerminalToken { span: (770, 794), rule: IncludeStatement, subrules: [Terminal(TerminalToken { span: (770, 778), rule: IncludeKW, content: "include " }), NonTerminal(NonTerminalToken { span: (778, 793), rule: IncludePathString, subrules: [Terminal(TerminalToken { span: (779, 792), rule: FilesystemPath, content: "bitify.circom" })] }), Terminal(TerminalToken { span: (793, 794), rule: END_OF_LINE, content: ";" })] }), Terminal(TerminalToken { span: (796, 832), rule: COMMENT, content: "// Returns 1 if in (in binary) > ct\n" }), NonTerminal(NonTerminalToken { span: (833, 1822), rule: TemplateBlock, subrules: [Terminal(TerminalToken { span: (833, 842), rule: TemplateKW, content: "template " }), Terminal(TerminalToken { span: (842, 854), rule: TemplateName, content: "CompConstant" }), NonTerminal(NonTerminalToken { span: (854, 858), rule: Parameters, subrules: [Terminal(TerminalToken { span: (855, 857), rule: VariableName, content: "ct" })] }), NonTerminal(NonTerminalToken { span: (859, 1822), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (865, 885), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (865, 878), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (865, 872), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (872, 872), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (872, 878), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (878, 880), rule: E_VariableName, content: "in" }), NonTerminal(NonTerminalToken { span: (880, 885), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (880, 881), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (881, 884), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (881, 884), rule: E_Value, subrules: [Terminal(TerminalToken { span: (881, 884), rule: E_Decimal, content: "254" })] })] }), Terminal(TerminalToken { span: (884, 885), rule: ArrayDeclarationOperatorClose, content: "]" })] })] }), Terminal(TerminalToken { span: (885, 886), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (891, 908), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (891, 905), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (891, 898), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (898, 898), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (898, 905), rule: SignalDeclarationConnectionKW, content: "output " })] }), Terminal(TerminalToken { span: (905, 908), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (908, 909), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (915, 932), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (915, 922), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (915, 922), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (922, 922), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (922, 922), rule: SignalDeclarationConnectionKW, content: "" })] }), Terminal(TerminalToken { span: (922, 927), rule: E_VariableName, content: "parts" }), NonTerminal(NonTerminalToken { span: (927, 932), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (927, 928), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (928, 931), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (928, 931), rule: E_Value, subrules: [Terminal(TerminalToken { span: (928, 931), rule: E_Decimal, content: "127" })] })] }), Terminal(TerminalToken { span: (931, 932), rule: ArrayDeclarationOperatorClose, content: "]" })] })] }), Terminal(TerminalToken { span: (932, 933), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (938, 949), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (938, 945), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (938, 945), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (945, 945), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (945, 945), rule: SignalDeclarationConnectionKW, content: "" })] }), Terminal(TerminalToken { span: (945, 949), rule: E_VariableName, content: "sout" })] }), Terminal(TerminalToken { span: (949, 950), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (956, 964), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (956, 960), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (960, 964), rule: E_VariableName, content: "clsb" })] }), Terminal(TerminalToken { span: (964, 965), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (970, 978), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (970, 974), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (974, 978), rule: E_VariableName, content: "cmsb" })] }), Terminal(TerminalToken { span: (978, 979), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (984, 992), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (984, 988), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (988, 992), rule: E_VariableName, content: "slsb" })] }), Terminal(TerminalToken { span: (992, 993), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (998, 1006), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (998, 1002), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (1002, 1006), rule: E_VariableName, content: "smsb" })] }), Terminal(TerminalToken { span: (1006, 1007), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1013, 1022), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1013, 1017), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (1017, 1020), rule: E_VariableName, content: "sum" }), NonTerminal(NonTerminalToken { span: (1021, 1022), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1021, 1022), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1021, 1022), rule: E_Decimal, content: "0" })] })] })] }), Terminal(TerminalToken { span: (1022, 1023), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1029, 1050), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1029, 1033), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (1033, 1034), rule: E_VariableName, content: "b" }), NonTerminal(NonTerminalToken { span: (1037, 1050), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1037, 1047), rule: E_Value, subrules: [NonTerminal(NonTerminalToken { span: (1037, 1047), rule: E_Brackets, subrules: [Terminal(TerminalToken { span: (1037, 1038), rule: E_BracketsOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (1038, 1046), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1038, 1039), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1038, 1039), rule: E_Decimal, content: "1" })] }), Terminal(TerminalToken { span: (1040, 1042), rule: E_13_BitwiseShiftOperator, content: "<<" }), NonTerminal(NonTerminalToken { span: (1043, 1046), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1043, 1046), rule: E_Decimal, content: "128" })] })] }), Terminal(TerminalToken { span: (1046, 1047), rule: E_BracketsOperatorclose, content: ")" })] })] }), Terminal(TerminalToken { span: (1048, 1049), rule: E_14_SumOperator, content: "-" }), NonTerminal(NonTerminalToken { span: (1049, 1050), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1049, 1050), rule: E_Decimal, content: "1" })] })] })] }), Terminal(TerminalToken { span: (1050, 1051), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1056, 1065), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1056, 1060), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (1060, 1061), rule: E_VariableName, content: "a" }), NonTerminal(NonTerminalToken { span: (1064, 1065), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1064, 1065), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1064, 1065), rule: E_Decimal, content: "1" })] })] })] }), Terminal(TerminalToken { span: (1065, 1066), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1071, 1080), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1071, 1075), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (1075, 1076), rule: E_VariableName, content: "e" }), NonTerminal(NonTerminalToken { span: (1079, 1080), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1079, 1080), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1079, 1080), rule: E_Decimal, content: "1" })] })] })] }), Terminal(TerminalToken { span: (1080, 1081), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1086, 1091), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1086, 1090), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (1090, 1091), rule: E_VariableName, content: "i" })] }), Terminal(TerminalToken { span: (1091, 1092), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1098, 1701), rule: ForStatement, subrules: [Terminal(TerminalToken { span: (1098, 1101), rule: ForKW, content: "for" }), NonTerminal(NonTerminalToken { span: (1103, 1106), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1103, 1104), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1103, 1104), rule: E_VariableName, content: "i" })] }), Terminal(TerminalToken { span: (1104, 1105), rule: E_4_AssignmentOperator, content: "=" }), NonTerminal(NonTerminalToken { span: (1105, 1106), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1105, 1106), rule: E_Decimal, content: "0" })] })] }), NonTerminal(NonTerminalToken { span: (1107, 1112), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1107, 1108), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1107, 1108), rule: E_VariableName, content: "i" })] }), Terminal(TerminalToken { span: (1108, 1109), rule: E_12_RelationalOrderingOperator, content: "<" }), NonTerminal(NonTerminalToken { span: (1109, 1112), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1109, 1112), rule: E_Decimal, content: "127" })] })] }), NonTerminal(NonTerminalToken { span: (1114, 1117), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1114, 1115), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1114, 1115), rule: E_VariableName, content: "i" })] }), Terminal(TerminalToken { span: (1115, 1117), rule: E_18_PostfixOperator, content: "++" })] }), NonTerminal(NonTerminalToken { span: (1119, 1701), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (1129, 1153), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1129, 1133), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1129, 1133), rule: E_VariableName, content: "clsb" })] }), Terminal(TerminalToken { span: (1134, 1136), rule: E_4_AssignmentOperator, content: "= " }), NonTerminal(NonTerminalToken { span: (1136, 1149), rule: E_Value, subrules: [NonTerminal(NonTerminalToken { span: (1136, 1149), rule: E_Brackets, subrules: [Terminal(TerminalToken { span: (1136, 1137), rule: E_BracketsOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (1137, 1148), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1137, 1139), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1137, 1139), rule: E_VariableName, content: "ct" })] }), Terminal(TerminalToken { span: (1140, 1142), rule: E_13_BitwiseShiftOperator, content: ">>" }), NonTerminal(NonTerminalToken { span: (1143, 1148), rule: E_Value, subrules: [NonTerminal(NonTerminalToken { span: (1143, 1148), rule: E_Brackets, subrules: [Terminal(TerminalToken { span: (1143, 1144), rule: E_BracketsOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (1144, 1147), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1144, 1145), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1144, 1145), rule: E_VariableName, content: "i" })] }), Terminal(TerminalToken { span: (1145, 1146), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (1146, 1147), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1146, 1147), rule: E_Decimal, content: "2" })] })] }), Terminal(TerminalToken { span: (1147, 1148), rule: E_BracketsOperatorclose, content: ")" })] })] })] }), Terminal(TerminalToken { span: (1148, 1149), rule: E_BracketsOperatorclose, content: ")" })] })] }), Terminal(TerminalToken { span: (1150, 1151), rule: E_10_BitwiseAndOperator, content: "&" }), NonTerminal(NonTerminalToken { span: (1152, 1153), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1152, 1153), rule: E_Decimal, content: "1" })] })] }), Terminal(TerminalToken { span: (1153, 1154), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1163, 1189), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1163, 1167), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1163, 1167), rule: E_VariableName, content: "cmsb" })] }), Terminal(TerminalToken { span: (1168, 1170), rule: E_4_AssignmentOperator, content: "= " }), NonTerminal(NonTerminalToken { span: (1170, 1185), rule: E_Value, subrules: [NonTerminal(NonTerminalToken { span: (1170, 1185), rule: E_Brackets, subrules: [Terminal(TerminalToken { span: (1170, 1171), rule: E_BracketsOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (1171, 1184), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1171, 1173), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1171, 1173), rule: E_VariableName, content: "ct" })] }), Terminal(TerminalToken { span: (1174, 1176), rule: E_13_BitwiseShiftOperator, content: ">>" }), NonTerminal(NonTerminalToken { span: (1177, 1184), rule: E_Value, subrules: [NonTerminal(NonTerminalToken { span: (1177, 1184), rule: E_Brackets, subrules: [Terminal(TerminalToken { span: (1177, 1178), rule: E_BracketsOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (1178, 1183), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1178, 1179), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1178, 1179), rule: E_VariableName, content: "i" })] }), Terminal(TerminalToken { span: (1179, 1180), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (1180, 1181), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1180, 1181), rule: E_Decimal, content: "2" })] }), Terminal(TerminalToken { span: (1181, 1182), rule: E_14_SumOperator, content: "+" }), NonTerminal(NonTerminalToken { span: (1182, 1183), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1182, 1183), rule: E_Decimal, content: "1" })] })] }), Terminal(TerminalToken { span: (1183, 1184), rule: E_BracketsOperatorclose, content: ")" })] })] })] }), Terminal(TerminalToken { span: (1184, 1185), rule: E_BracketsOperatorclose, content: ")" })] })] }), Terminal(TerminalToken { span: (1186, 1187), rule: E_10_BitwiseAndOperator, content: "&" }), NonTerminal(NonTerminalToken { span: (1188, 1189), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1188, 1189), rule: E_Decimal, content: "1" })] })] }), Terminal(TerminalToken { span: (1189, 1190), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1199, 1213), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1199, 1203), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1199, 1203), rule: E_VariableName, content: "slsb" })] }), Terminal(TerminalToken { span: (1204, 1206), rule: E_4_AssignmentOperator, content: "= " }), NonTerminal(NonTerminalToken { span: (1206, 1208), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1206, 1208), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (1208, 1209), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1209, 1212), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1209, 1212), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1209, 1210), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1209, 1210), rule: E_VariableName, content: "i" })] }), Terminal(TerminalToken { span: (1210, 1211), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (1211, 1212), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1211, 1212), rule: E_Decimal, content: "2" })] })] })] }), Terminal(TerminalToken { span: (1212, 1213), rule: E_20_BracedOperatorClose, content: "]" })] }), Terminal(TerminalToken { span: (1213, 1214), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1223, 1239), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1223, 1227), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1223, 1227), rule: E_VariableName, content: "smsb" })] }), Terminal(TerminalToken { span: (1228, 1230), rule: E_4_AssignmentOperator, content: "= " }), NonTerminal(NonTerminalToken { span: (1230, 1232), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1230, 1232), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (1232, 1233), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1233, 1238), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1233, 1238), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1233, 1234), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1233, 1234), rule: E_VariableName, content: "i" })] }), Terminal(TerminalToken { span: (1234, 1235), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (1235, 1236), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1235, 1236), rule: E_Decimal, content: "2" })] }), Terminal(TerminalToken { span: (1236, 1237), rule: E_14_SumOperator, content: "+" }), NonTerminal(NonTerminalToken { span: (1237, 1238), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1237, 1238), rule: E_Decimal, content: "1" })] })] })] }), Terminal(TerminalToken { span: (1238, 1239), rule: E_20_BracedOperatorClose, content: "]" })] }), Terminal(TerminalToken { span: (1239, 1240), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1250, 1610), rule: IfStatement, subrules: [Terminal(TerminalToken { span: (1250, 1252), rule: IfKW, content: "if" }), NonTerminal(NonTerminalToken { span: (1254, 1274), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1254, 1263), rule: E_Value, subrules: [NonTerminal(NonTerminalToken { span: (1254, 1263), rule: E_Brackets, subrules: [Terminal(TerminalToken { span: (1254, 1255), rule: E_BracketsOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (1255, 1262), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1255, 1259), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1255, 1259), rule: E_VariableName, content: "cmsb" })] }), Terminal(TerminalToken { span: (1259, 1261), rule: E_11_RelationalEqualityOperator, content: "==" }), NonTerminal(NonTerminalToken { span: (1261, 1262), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1261, 1262), rule: E_Decimal, content: "0" })] })] }), Terminal(TerminalToken { span: (1262, 1263), rule: E_BracketsOperatorclose, content: ")" })] })] }), Terminal(TerminalToken { span: (1263, 1265), rule: E_7_LogicalAndOperator, content: "&&" }), NonTerminal(NonTerminalToken { span: (1265, 1274), rule: E_Value, subrules: [NonTerminal(NonTerminalToken { span: (1265, 1274), rule: E_Brackets, subrules: [Terminal(TerminalToken { span: (1265, 1266), rule: E_BracketsOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (1266, 1273), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1266, 1270), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1266, 1270), rule: E_VariableName, content: "clsb" })] }), Terminal(TerminalToken { span: (1270, 1272), rule: E_11_RelationalEqualityOperator, content: "==" }), NonTerminal(NonTerminalToken { span: (1272, 1273), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1272, 1273), rule: E_Decimal, content: "0" })] })] }), Terminal(TerminalToken { span: (1273, 1274), rule: E_BracketsOperatorclose, content: ")" })] })] })] }), NonTerminal(NonTerminalToken { span: (1276, 1344), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (1290, 1333), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1290, 1295), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1290, 1295), rule: E_VariableName, content: "parts" })] }), Terminal(TerminalToken { span: (1295, 1296), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1296, 1297), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1296, 1297), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1296, 1297), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1296, 1297), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (1297, 1298), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (1299, 1302), rule: E_2_SignalLeftHandOperator, content: "<==" }), Terminal(TerminalToken { span: (1303, 1304), rule: E_17_PrefixOperator, content: "-" }), NonTerminal(NonTerminalToken { span: (1304, 1305), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1304, 1305), rule: E_VariableName, content: "b" })] }), Terminal(TerminalToken { span: (1305, 1306), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (1306, 1310), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1306, 1310), rule: E_VariableName, content: "smsb" })] }), Terminal(TerminalToken { span: (1310, 1311), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (1311, 1315), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1311, 1315), rule: E_VariableName, content: "slsb" })] }), Terminal(TerminalToken { span: (1316, 1317), rule: E_14_SumOperator, content: "+" }), NonTerminal(NonTerminalToken { span: (1318, 1319), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1318, 1319), rule: E_VariableName, content: "b" })] }), Terminal(TerminalToken { span: (1319, 1320), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (1320, 1324), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1320, 1324), rule: E_VariableName, content: "smsb" })] }), Terminal(TerminalToken { span: (1325, 1326), rule: E_14_SumOperator, content: "+" }), NonTerminal(NonTerminalToken { span: (1327, 1328), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1327, 1328), rule: E_VariableName, content: "b" })] }), Terminal(TerminalToken { span: (1328, 1329), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (1329, 1333), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1329, 1333), rule: E_VariableName, content: "slsb" })] })] }), Terminal(TerminalToken { span: (1333, 1334), rule: END_OF_LINE, content: ";" })] }), NonTerminal(NonTerminalToken { span: (1345, 1456), rule: ElseIfStatement, subrules: [NonTerminal(NonTerminalToken { span: (1345, 1352), rule: ElseIfKW, subrules: [Terminal(TerminalToken { span: (1345, 1349), rule: ElseKW, content: "else" }), Terminal(TerminalToken { span: (1350, 1352), rule: IfKW, content: "if" })] }), NonTerminal(NonTerminalToken { span: (1354, 1374), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1354, 1363), rule: E_Value, subrules: [NonTerminal(NonTerminalToken { span: (1354, 1363), rule: E_Brackets, subrules: [Terminal(TerminalToken { span: (1354, 1355), rule: E_BracketsOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (1355, 1362), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1355, 1359), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1355, 1359), rule: E_VariableName, content: "cmsb" })] }), Terminal(TerminalToken { span: (1359, 1361), rule: E_11_RelationalEqualityOperator, content: "==" }), NonTerminal(NonTerminalToken { span: (1361, 1362), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1361, 1362), rule: E_Decimal, content: "0" })] })] }), Terminal(TerminalToken { span: (1362, 1363), rule: E_BracketsOperatorclose, content: ")" })] })] }), Terminal(TerminalToken { span: (1363, 1365), rule: E_7_LogicalAndOperator, content: "&&" }), NonTerminal(NonTerminalToken { span: (1365, 1374), rule: E_Value, subrules: [NonTerminal(NonTerminalToken { span: (1365, 1374), rule: E_Brackets, subrules: [Terminal(TerminalToken { span: (1365, 1366), rule: E_BracketsOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (1366, 1373), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1366, 1370), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1366, 1370), rule: E_VariableName, content: "clsb" })] }), Terminal(TerminalToken { span: (1370, 1372), rule: E_11_RelationalEqualityOperator, content: "==" }), NonTerminal(NonTerminalToken { span: (1372, 1373), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1372, 1373), rule: E_Decimal, content: "1" })] })] }), Terminal(TerminalToken { span: (1373, 1374), rule: E_BracketsOperatorclose, content: ")" })] })] })] }), NonTerminal(NonTerminalToken { span: (1376, 1456), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (1390, 1445), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1390, 1395), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1390, 1395), rule: E_VariableName, content: "parts" })] }), Terminal(TerminalToken { span: (1395, 1396), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1396, 1397), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1396, 1397), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1396, 1397), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1396, 1397), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (1397, 1398), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (1399, 1402), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (1403, 1404), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1403, 1404), rule: E_VariableName, content: "a" })] }), Terminal(TerminalToken { span: (1404, 1405), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (1405, 1409), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1405, 1409), rule: E_VariableName, content: "smsb" })] }), Terminal(TerminalToken { span: (1409, 1410), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (1410, 1414), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1410, 1414), rule: E_VariableName, content: "slsb" })] }), Terminal(TerminalToken { span: (1415, 1416), rule: E_14_SumOperator, content: "-" }), NonTerminal(NonTerminalToken { span: (1417, 1418), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1417, 1418), rule: E_VariableName, content: "a" })] }), Terminal(TerminalToken { span: (1418, 1419), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (1419, 1423), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1419, 1423), rule: E_VariableName, content: "slsb" })] }), Terminal(TerminalToken { span: (1424, 1425), rule: E_14_SumOperator, content: "+" }), NonTerminal(NonTerminalToken { span: (1426, 1427), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1426, 1427), rule: E_VariableName, content: "b" })] }), Terminal(TerminalToken { span: (1427, 1428), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (1428, 1432), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1428, 1432), rule: E_VariableName, content: "smsb" })] }), Terminal(TerminalToken { span: (1433, 1434), rule: E_14_SumOperator, content: "-" }), NonTerminal(NonTerminalToken { span: (1435, 1436), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1435, 1436), rule: E_VariableName, content: "a" })] }), Terminal(TerminalToken { span: (1436, 1437), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (1437, 1441), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1437, 1441), rule: E_VariableName, content: "smsb" })] }), Terminal(TerminalToken { span: (1442, 1443), rule: E_14_SumOperator, content: "+" }), NonTerminal(NonTerminalToken { span: (1444, 1445), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1444, 1445), rule: E_VariableName, content: "a" })] })] }), Terminal(TerminalToken { span: (1445, 1446), rule: END_OF_LINE, content: ";" })] })] }), NonTerminal(NonTerminalToken { span: (1457, 1550), rule: ElseIfStatement, subrules: [NonTerminal(NonTerminalToken { span: (1457, 1464), rule: ElseIfKW, subrules: [Terminal(TerminalToken { span: (1457, 1461), rule: ElseKW, content: "else" }), Terminal(TerminalToken { span: (1462, 1464), rule: IfKW, content: "if" })] }), NonTerminal(NonTerminalToken { span: (1466, 1486), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1466, 1475), rule: E_Value, subrules: [NonTerminal(NonTerminalToken { span: (1466, 1475), rule: E_Brackets, subrules: [Terminal(TerminalToken { span: (1466, 1467), rule: E_BracketsOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (1467, 1474), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1467, 1471), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1467, 1471), rule: E_VariableName, content: "cmsb" })] }), Terminal(TerminalToken { span: (1471, 1473), rule: E_11_RelationalEqualityOperator, content: "==" }), NonTerminal(NonTerminalToken { span: (1473, 1474), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1473, 1474), rule: E_Decimal, content: "1" })] })] }), Terminal(TerminalToken { span: (1474, 1475), rule: E_BracketsOperatorclose, content: ")" })] })] }), Terminal(TerminalToken { span: (1475, 1477), rule: E_7_LogicalAndOperator, content: "&&" }), NonTerminal(NonTerminalToken { span: (1477, 1486), rule: E_Value, subrules: [NonTerminal(NonTerminalToken { span: (1477, 1486), rule: E_Brackets, subrules: [Terminal(TerminalToken { span: (1477, 1478), rule: E_BracketsOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (1478, 1485), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1478, 1482), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1478, 1482), rule: E_VariableName, content: "clsb" })] }), Terminal(TerminalToken { span: (1482, 1484), rule: E_11_RelationalEqualityOperator, content: "==" }), NonTerminal(NonTerminalToken { span: (1484, 1485), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1484, 1485), rule: E_Decimal, content: "0" })] })] }), Terminal(TerminalToken { span: (1485, 1486), rule: E_BracketsOperatorclose, content: ")" })] })] })] }), NonTerminal(NonTerminalToken { span: (1488, 1550), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (1502, 1539), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1502, 1507), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1502, 1507), rule: E_VariableName, content: "parts" })] }), Terminal(TerminalToken { span: (1507, 1508), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1508, 1509), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1508, 1509), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1508, 1509), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1508, 1509), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (1509, 1510), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (1511, 1514), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (1515, 1516), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1515, 1516), rule: E_VariableName, content: "b" })] }), Terminal(TerminalToken { span: (1516, 1517), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (1517, 1521), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1517, 1521), rule: E_VariableName, content: "smsb" })] }), Terminal(TerminalToken { span: (1521, 1522), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (1522, 1526), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1522, 1526), rule: E_VariableName, content: "slsb" })] }), Terminal(TerminalToken { span: (1527, 1528), rule: E_14_SumOperator, content: "-" }), NonTerminal(NonTerminalToken { span: (1529, 1530), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1529, 1530), rule: E_VariableName, content: "a" })] }), Terminal(TerminalToken { span: (1530, 1531), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (1531, 1535), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1531, 1535), rule: E_VariableName, content: "smsb" })] }), Terminal(TerminalToken { span: (1536, 1537), rule: E_14_SumOperator, content: "+" }), NonTerminal(NonTerminalToken { span: (1538, 1539), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1538, 1539), rule: E_VariableName, content: "a" })] })] }), Terminal(TerminalToken { span: (1539, 1540), rule: END_OF_LINE, content: ";" })] })] }), NonTerminal(NonTerminalToken { span: (1551, 1610), rule: ElseStatement, subrules: [Terminal(TerminalToken { span: (1551, 1555), rule: ElseKW, content: "else" }), NonTerminal(NonTerminalToken { span: (1556, 1610), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (1570, 1599), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1570, 1575), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1570, 1575), rule: E_VariableName, content: "parts" })] }), Terminal(TerminalToken { span: (1575, 1576), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1576, 1577), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1576, 1577), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1576, 1577), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1576, 1577), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (1577, 1578), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (1579, 1582), rule: E_2_SignalLeftHandOperator, content: "<==" }), Terminal(TerminalToken { span: (1583, 1584), rule: E_17_PrefixOperator, content: "-" }), NonTerminal(NonTerminalToken { span: (1584, 1585), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1584, 1585), rule: E_VariableName, content: "a" })] }), Terminal(TerminalToken { span: (1585, 1586), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (1586, 1590), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1586, 1590), rule: E_VariableName, content: "smsb" })] }), Terminal(TerminalToken { span: (1590, 1591), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (1591, 1595), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1591, 1595), rule: E_VariableName, content: "slsb" })] }), Terminal(TerminalToken { span: (1596, 1597), rule: E_14_SumOperator, content: "+" }), NonTerminal(NonTerminalToken { span: (1598, 1599), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1598, 1599), rule: E_VariableName, content: "a" })] })] }), Terminal(TerminalToken { span: (1599, 1600), rule: END_OF_LINE, content: ";" })] })] })] }), NonTerminal(NonTerminalToken { span: (1620, 1640), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1620, 1623), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1620, 1623), rule: E_VariableName, content: "sum" })] }), Terminal(TerminalToken { span: (1624, 1626), rule: E_4_AssignmentOperator, content: "= " }), NonTerminal(NonTerminalToken { span: (1626, 1629), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1626, 1629), rule: E_VariableName, content: "sum" })] }), Terminal(TerminalToken { span: (1630, 1631), rule: E_14_SumOperator, content: "+" }), NonTerminal(NonTerminalToken { span: (1632, 1637), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1632, 1637), rule: E_VariableName, content: "parts" })] }), Terminal(TerminalToken { span: (1637, 1638), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1638, 1639), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1638, 1639), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1638, 1639), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1638, 1639), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (1639, 1640), rule: E_20_BracedOperatorClose, content: "]" })] }), Terminal(TerminalToken { span: (1640, 1641), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1651, 1659), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1651, 1652), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1651, 1652), rule: E_VariableName, content: "b" })] }), Terminal(TerminalToken { span: (1653, 1655), rule: E_4_AssignmentOperator, content: "= " }), NonTerminal(NonTerminalToken { span: (1655, 1656), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1655, 1656), rule: E_VariableName, content: "b" })] }), Terminal(TerminalToken { span: (1657, 1658), rule: E_14_SumOperator, content: "-" }), NonTerminal(NonTerminalToken { span: (1658, 1659), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1658, 1659), rule: E_VariableName, content: "e" })] })] }), Terminal(TerminalToken { span: (1659, 1660), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1669, 1677), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1669, 1670), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1669, 1670), rule: E_VariableName, content: "a" })] }), Terminal(TerminalToken { span: (1671, 1673), rule: E_4_AssignmentOperator, content: "= " }), NonTerminal(NonTerminalToken { span: (1673, 1674), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1673, 1674), rule: E_VariableName, content: "a" })] }), Terminal(TerminalToken { span: (1675, 1676), rule: E_14_SumOperator, content: "+" }), NonTerminal(NonTerminalToken { span: (1676, 1677), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1676, 1677), rule: E_VariableName, content: "e" })] })] }), Terminal(TerminalToken { span: (1677, 1678), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1687, 1694), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1687, 1688), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1687, 1688), rule: E_VariableName, content: "e" })] }), Terminal(TerminalToken { span: (1689, 1691), rule: E_4_AssignmentOperator, content: "= " }), NonTerminal(NonTerminalToken { span: (1691, 1692), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1691, 1692), rule: E_VariableName, content: "e" })] }), Terminal(TerminalToken { span: (1692, 1693), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (1693, 1694), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1693, 1694), rule: E_Decimal, content: "2" })] })] }), Terminal(TerminalToken { span: (1694, 1695), rule: END_OF_LINE, content: ";" })] })] }), NonTerminal(NonTerminalToken { span: (1707, 1719), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1707, 1711), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1707, 1711), rule: E_VariableName, content: "sout" })] }), Terminal(TerminalToken { span: (1712, 1715), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (1716, 1719), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1716, 1719), rule: E_VariableName, content: "sum" })] })] }), Terminal(TerminalToken { span: (1719, 1720), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1726, 1760), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1726, 1736), rule: ComponentDeclarationKW, content: "component " }), Terminal(TerminalToken { span: (1736, 1744), rule: E_VariableName, content: "num2bits" }), NonTerminal(NonTerminalToken { span: (1747, 1760), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1747, 1755), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1747, 1755), rule: E_VariableName, content: "Num2Bits" })] }), Terminal(TerminalToken { span: (1755, 1756), rule: E_20_BracedOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (1756, 1759), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1756, 1759), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1756, 1759), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1756, 1759), rule: E_Decimal, content: "135" })] })] })] }), Terminal(TerminalToken { span: (1759, 1760), rule: E_20_BracedOperatorClose, content: ")" })] })] }), Terminal(TerminalToken { span: (1760, 1761), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1767, 1787), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1767, 1775), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1767, 1775), rule: E_VariableName, content: "num2bits" })] }), Terminal(TerminalToken { span: (1775, 1776), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (1776, 1778), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1776, 1778), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (1779, 1782), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (1783, 1787), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1783, 1787), rule: E_VariableName, content: "sout" })] })] }), Terminal(TerminalToken { span: (1787, 1788), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1794, 1819), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1794, 1797), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1794, 1797), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (1798, 1801), rule: E_2_SignalLeftHandOperator, content: "<==" }), NonTerminal(NonTerminalToken { span: (1802, 1810), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1802, 1810), rule: E_VariableName, content: "num2bits" })] }), Terminal(TerminalToken { span: (1810, 1811), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (1811, 1814), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1811, 1814), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (1814, 1815), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1815, 1818), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1815, 1818), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1815, 1818), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1815, 1818), rule: E_Decimal, content: "127" })] })] })] }), Terminal(TerminalToken { span: (1818, 1819), rule: E_20_BracedOperatorClose, content: "]" })] }), Terminal(TerminalToken { span: (1819, 1820), rule: END_OF_LINE, content: ";" })] })] }), Terminal(TerminalToken { span: (1823, 1823), rule: EOI, content: "" })] })][NonTerminal(NonTerminalToken { span: (0, 995), rule: Circuit, subrules: [Terminal(TerminalToken { span: (0, 747), rule: COMMENT, content: "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of circom (Zero Knowledge Circuit Compiler).\n\n    circom is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    circom is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with circom. If not, see <https://www.gnu.org/licenses/>.\n*/" }), NonTerminal(NonTerminalToken { span: (748, 770), rule: CompilerDirective, subrules: [Terminal(TerminalToken { span: (748, 755), rule: PragmaKW, content: "pragma " }), Terminal(TerminalToken { span: (755, 762), rule: CircomKW, content: "circom " }), NonTerminal(NonTerminalToken { span: (762, 768), rule: E_SemVer, subrules: [Terminal(TerminalToken { span: (762, 763), rule: E_Decimal, content: "2" }), Terminal(TerminalToken { span: (764, 765), rule: E_Decimal, content: "0" }), Terminal(TerminalToken { span: (766, 767), rule: E_Decimal, content: "0" })] })] }), NonTerminal(NonTerminalToken { span: (770, 800), rule: IncludeStatement, subrules: [Terminal(TerminalToken { span: (770, 778), rule: IncludeKW, content: "include " }), NonTerminal(NonTerminalToken { span: (778, 799), rule: IncludePathString, subrules: [Terminal(TerminalToken { span: (779, 798), rule: FilesystemPath, content: "compconstant.circom" })] }), Terminal(TerminalToken { span: (799, 800), rule: END_OF_LINE, content: ";" })] }), NonTerminal(NonTerminalToken { span: (803, 994), rule: TemplateBlock, subrules: [Terminal(TerminalToken { span: (803, 812), rule: TemplateKW, content: "template " }), Terminal(TerminalToken { span: (812, 822), rule: TemplateName, content: "AliasCheck" }), Terminal(TerminalToken { span: (822, 824), rule: Parameters, content: "()" }), NonTerminal(NonTerminalToken { span: (825, 994), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (832, 852), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (832, 845), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (832, 839), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (839, 839), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (839, 845), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (845, 847), rule: E_VariableName, content: "in" }), NonTerminal(NonTerminalToken { span: (847, 852), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (847, 848), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (848, 851), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (848, 851), rule: E_Value, subrules: [Terminal(TerminalToken { span: (848, 851), rule: E_Decimal, content: "254" })] })] }), Terminal(TerminalToken { span: (851, 852), rule: ArrayDeclarationOperatorClose, content: "]" })] })] }), Terminal(TerminalToken { span: (852, 853), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (859, 901), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (859, 870), rule: ComponentDeclarationKW, content: "component  " }), Terminal(TerminalToken { span: (870, 882), rule: E_VariableName, content: "compConstant" }), NonTerminal(NonTerminalToken { span: (885, 901), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (885, 897), rule: E_Value, subrules: [Terminal(TerminalToken { span: (885, 897), rule: E_VariableName, content: "CompConstant" })] }), Terminal(TerminalToken { span: (897, 898), rule: E_20_BracedOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (898, 900), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (898, 900), rule: Expression, subrules: [Terminal(TerminalToken { span: (898, 899), rule: E_17_PrefixOperator, content: "-" }), NonTerminal(NonTerminalToken { span: (899, 900), rule: E_Value, subrules: [Terminal(TerminalToken { span: (899, 900), rule: E_Decimal, content: "1" })] })] })] }), Terminal(TerminalToken { span: (900, 901), rule: E_20_BracedOperatorClose, content: ")" })] })] }), Terminal(TerminalToken { span: (901, 902), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (908, 963), rule: ForStatement, subrules: [Terminal(TerminalToken { span: (908, 911), rule: ForKW, content: "for" }), NonTerminal(NonTerminalToken { span: (913, 920), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (913, 917), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (917, 918), rule: E_VariableName, content: "i" }), NonTerminal(NonTerminalToken { span: (919, 920), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (919, 920), rule: E_Value, subrules: [Terminal(TerminalToken { span: (919, 920), rule: E_Decimal, content: "0" })] })] })] }), NonTerminal(NonTerminalToken { span: (922, 927), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (922, 923), rule: E_Value, subrules: [Terminal(TerminalToken { span: (922, 923), rule: E_VariableName, content: "i" })] }), Terminal(TerminalToken { span: (923, 924), rule: E_12_RelationalOrderingOperator, content: "<" }), NonTerminal(NonTerminalToken { span: (924, 927), rule: E_Value, subrules: [Terminal(TerminalToken { span: (924, 927), rule: E_Decimal, content: "254" })] })] }), NonTerminal(NonTerminalToken { span: (929, 932), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (929, 930), rule: E_Value, subrules: [Terminal(TerminalToken { span: (929, 930), rule: E_VariableName, content: "i" })] }), Terminal(TerminalToken { span: (930, 932), rule: E_18_PostfixOperator, content: "++" })] }), NonTerminal(NonTerminalToken { span: (934, 963), rule: OneLineBody, subrules: [NonTerminal(NonTerminalToken { span: (934, 962), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (934, 936), rule: E_Value, subrules: [Terminal(TerminalToken { span: (934, 936), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (936, 937), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (937, 938), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (937, 938), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (937, 938), rule: E_Value, subrules: [Terminal(TerminalToken { span: (937, 938), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (938, 939), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (940, 943), rule: E_3_SignalRightHandOperator, content: "==>" }), NonTerminal(NonTerminalToken { span: (944, 956), rule: E_Value, subrules: [Terminal(TerminalToken { span: (944, 956), rule: E_VariableName, content: "compConstant" })] }), Terminal(TerminalToken { span: (956, 957), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (957, 959), rule: E_Value, subrules: [Terminal(TerminalToken { span: (957, 959), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (959, 960), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (960, 961), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (960, 961), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (960, 961), rule: E_Value, subrules: [Terminal(TerminalToken { span: (960, 961), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (961, 962), rule: E_20_BracedOperatorClose, content: "]" })] }), Terminal(TerminalToken { span: (962, 963), rule: END_OF_LINE, content: ";" })] })] }), NonTerminal(NonTerminalToken { span: (969, 991), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (969, 981), rule: E_Value, subrules: [Terminal(TerminalToken { span: (969, 981), rule: E_VariableName, content: "compConstant" })] }), Terminal(TerminalToken { span: (981, 982), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (982, 985), rule: E_Value, subrules: [Terminal(TerminalToken { span: (982, 985), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (986, 989), rule: E_1_SignalAssertionConstraintOperator, content: "===" }), NonTerminal(NonTerminalToken { span: (990, 991), rule: E_Value, subrules: [Terminal(TerminalToken { span: (990, 991), rule: E_Decimal, content: "0" })] })] }), Terminal(TerminalToken { span: (991, 992), rule: END_OF_LINE, content: ";" })] })] }), Terminal(TerminalToken { span: (995, 995), rule: EOI, content: "" })] })][NonTerminal(NonTerminalToken { span: (0, 2276), rule: Circuit, subrules: [Terminal(TerminalToken { span: (0, 747), rule: COMMENT, content: "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of circom (Zero Knowledge Circuit Compiler).\n\n    circom is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    circom is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with circom. If not, see <https://www.gnu.org/licenses/>.\n*/" }), NonTerminal(NonTerminalToken { span: (748, 770), rule: CompilerDirective, subrules: [Terminal(TerminalToken { span: (748, 755), rule: PragmaKW, content: "pragma " }), Terminal(TerminalToken { span: (755, 762), rule: CircomKW, content: "circom " }), NonTerminal(NonTerminalToken { span: (762, 768), rule: E_SemVer, subrules: [Terminal(TerminalToken { span: (762, 763), rule: E_Decimal, content: "2" }), Terminal(TerminalToken { span: (764, 765), rule: E_Decimal, content: "0" }), Terminal(TerminalToken { span: (766, 767), rule: E_Decimal, content: "0" })] })] }), NonTerminal(NonTerminalToken { span: (770, 799), rule: IncludeStatement, subrules: [Terminal(TerminalToken { span: (770, 778), rule: IncludeKW, content: "include " }), NonTerminal(NonTerminalToken { span: (778, 798), rule: IncludePathString, subrules: [Terminal(TerminalToken { span: (779, 797), rule: FilesystemPath, content: "comparators.circom" })] }), Terminal(TerminalToken { span: (798, 799), rule: END_OF_LINE, content: ";" })] }), NonTerminal(NonTerminalToken { span: (800, 828), rule: IncludeStatement, subrules: [Terminal(TerminalToken { span: (800, 808), rule: IncludeKW, content: "include " }), NonTerminal(NonTerminalToken { span: (808, 827), rule: IncludePathString, subrules: [Terminal(TerminalToken { span: (809, 826), rule: FilesystemPath, content: "aliascheck.circom" })] }), Terminal(TerminalToken { span: (827, 828), rule: END_OF_LINE, content: ";" })] }), NonTerminal(NonTerminalToken { span: (831, 1106), rule: TemplateBlock, subrules: [Terminal(TerminalToken { span: (831, 840), rule: TemplateKW, content: "template " }), Terminal(TerminalToken { span: (840, 848), rule: TemplateName, content: "Num2Bits" }), NonTerminal(NonTerminalToken { span: (848, 851), rule: Parameters, subrules: [Terminal(TerminalToken { span: (849, 850), rule: VariableName, content: "n" })] }), NonTerminal(NonTerminalToken { span: (852, 1106), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (858, 873), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (858, 871), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (858, 865), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (865, 865), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (865, 871), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (871, 873), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (873, 874), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (879, 899), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (879, 893), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (879, 886), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (886, 886), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (886, 893), rule: SignalDeclarationConnectionKW, content: "output " })] }), Terminal(TerminalToken { span: (893, 896), rule: E_VariableName, content: "out" }), NonTerminal(NonTerminalToken { span: (896, 899), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (896, 897), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (897, 898), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (897, 898), rule: E_Value, subrules: [Terminal(TerminalToken { span: (897, 898), rule: E_VariableName, content: "n" })] })] }), Terminal(TerminalToken { span: (898, 899), rule: ArrayDeclarationOperatorClose, content: "]" })] })] }), Terminal(TerminalToken { span: (899, 900), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (905, 914), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (905, 909), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (909, 912), rule: E_VariableName, content: "lc1" }), NonTerminal(NonTerminalToken { span: (913, 914), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (913, 914), rule: E_Value, subrules: [Terminal(TerminalToken { span: (913, 914), rule: E_Decimal, content: "0" })] })] })] }), Terminal(TerminalToken { span: (914, 915), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (921, 929), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (921, 925), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (925, 927), rule: E_VariableName, content: "e2" }), NonTerminal(NonTerminalToken { span: (928, 929), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (928, 929), rule: E_Value, subrules: [Terminal(TerminalToken { span: (928, 929), rule: E_Decimal, content: "1" })] })] })] }), Terminal(TerminalToken { span: (929, 930), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (935, 1087), rule: ForStatement, subrules: [Terminal(TerminalToken { span: (935, 938), rule: ForKW, content: "for" }), NonTerminal(NonTerminalToken { span: (940, 949), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (940, 944), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (944, 945), rule: E_VariableName, content: "i" }), NonTerminal(NonTerminalToken { span: (948, 949), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (948, 949), rule: E_Value, subrules: [Terminal(TerminalToken { span: (948, 949), rule: E_Decimal, content: "0" })] })] })] }), NonTerminal(NonTerminalToken { span: (951, 954), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (951, 952), rule: E_Value, subrules: [Terminal(TerminalToken { span: (951, 952), rule: E_VariableName, content: "i" })] }), Terminal(TerminalToken { span: (952, 953), rule: E_12_RelationalOrderingOperator, content: "<" }), NonTerminal(NonTerminalToken { span: (953, 954), rule: E_Value, subrules: [Terminal(TerminalToken { span: (953, 954), rule: E_VariableName, content: "n" })] })] }), NonTerminal(NonTerminalToken { span: (956, 959), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (956, 957), rule: E_Value, subrules: [Terminal(TerminalToken { span: (956, 957), rule: E_VariableName, content: "i" })] }), Terminal(TerminalToken { span: (957, 959), rule: E_18_PostfixOperator, content: "++" })] }), NonTerminal(NonTerminalToken { span: (961, 1087), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (971, 995), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (971, 974), rule: E_Value, subrules: [Terminal(TerminalToken { span: (971, 974), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (974, 975), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (975, 976), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (975, 976), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (975, 976), rule: E_Value, subrules: [Terminal(TerminalToken { span: (975, 976), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (976, 977), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (978, 981), rule: E_2_SignalLeftHandOperator, content: "<--" }), NonTerminal(NonTerminalToken { span: (982, 991), rule: E_Value, subrules: [NonTerminal(NonTerminalToken { span: (982, 991), rule: E_Brackets, subrules: [Terminal(TerminalToken { span: (982, 983), rule: E_BracketsOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (983, 990), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (983, 985), rule: E_Value, subrules: [Terminal(TerminalToken { span: (983, 985), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (986, 988), rule: E_13_BitwiseShiftOperator, content: ">>" }), NonTerminal(NonTerminalToken { span: (989, 990), rule: E_Value, subrules: [Terminal(TerminalToken { span: (989, 990), rule: E_VariableName, content: "i" })] })] }), Terminal(TerminalToken { span: (990, 991), rule: E_BracketsOperatorclose, content: ")" })] })] }), Terminal(TerminalToken { span: (992, 993), rule: E_10_BitwiseAndOperator, content: "&" }), NonTerminal(NonTerminalToken { span: (994, 995), rule: E_Value, subrules: [Terminal(TerminalToken { span: (994, 995), rule: E_Decimal, content: "1" })] })] }), Terminal(TerminalToken { span: (995, 996), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1005, 1032), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1005, 1008), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1005, 1008), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (1008, 1009), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1009, 1010), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1009, 1010), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1009, 1010), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1009, 1010), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (1010, 1011), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (1012, 1013), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (1014, 1026), rule: E_Value, subrules: [NonTerminal(NonTerminalToken { span: (1014, 1026), rule: E_Brackets, subrules: [Terminal(TerminalToken { span: (1014, 1015), rule: E_BracketsOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (1015, 1025), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1015, 1018), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1015, 1018), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (1018, 1019), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1019, 1020), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1019, 1020), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1019, 1020), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1019, 1020), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (1020, 1021), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (1022, 1023), rule: E_14_SumOperator, content: "-" }), NonTerminal(NonTerminalToken { span: (1023, 1024), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1023, 1024), rule: E_Decimal, content: "1" })] })] }), Terminal(TerminalToken { span: (1025, 1026), rule: E_BracketsOperatorclose, content: ")" })] })] }), Terminal(TerminalToken { span: (1027, 1030), rule: E_1_SignalAssertionConstraintOperator, content: "===" }), NonTerminal(NonTerminalToken { span: (1031, 1032), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1031, 1032), rule: E_Decimal, content: "0" })] })] }), Terminal(TerminalToken { span: (1032, 1033), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1042, 1060), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1042, 1045), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1042, 1045), rule: E_VariableName, content: "lc1" })] }), Terminal(TerminalToken { span: (1046, 1048), rule: E_4_AssignmentOperator, content: "+=" }), NonTerminal(NonTerminalToken { span: (1049, 1052), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1049, 1052), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (1052, 1053), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1053, 1054), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1053, 1054), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1053, 1054), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1053, 1054), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (1054, 1055), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (1056, 1057), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (1058, 1060), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1058, 1060), rule: E_VariableName, content: "e2" })] })] }), Terminal(TerminalToken { span: (1060, 1061), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1070, 1080), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1070, 1072), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1070, 1072), rule: E_VariableName, content: "e2" })] }), Terminal(TerminalToken { span: (1073, 1075), rule: E_4_AssignmentOperator, content: "= " }), NonTerminal(NonTerminalToken { span: (1075, 1077), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1075, 1077), rule: E_VariableName, content: "e2" })] }), Terminal(TerminalToken { span: (1077, 1078), rule: E_14_SumOperator, content: "+" }), NonTerminal(NonTerminalToken { span: (1078, 1080), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1078, 1080), rule: E_VariableName, content: "e2" })] })] }), Terminal(TerminalToken { span: (1080, 1081), rule: END_OF_LINE, content: ";" })] })] }), NonTerminal(NonTerminalToken { span: (1093, 1103), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1093, 1096), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1093, 1096), rule: E_VariableName, content: "lc1" })] }), Terminal(TerminalToken { span: (1097, 1100), rule: E_1_SignalAssertionConstraintOperator, content: "===" }), NonTerminal(NonTerminalToken { span: (1101, 1103), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1101, 1103), rule: E_VariableName, content: "in" })] })] }), Terminal(TerminalToken { span: (1103, 1104), rule: END_OF_LINE, content: ";" })] })] }), NonTerminal(NonTerminalToken { span: (1108, 1394), rule: TemplateBlock, subrules: [Terminal(TerminalToken { span: (1108, 1117), rule: TemplateKW, content: "template " }), Terminal(TerminalToken { span: (1117, 1132), rule: TemplateName, content: "Num2Bits_strict" }), Terminal(TerminalToken { span: (1132, 1134), rule: Parameters, content: "()" }), NonTerminal(NonTerminalToken { span: (1135, 1394), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (1141, 1156), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (1141, 1154), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (1141, 1148), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (1148, 1148), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (1148, 1154), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (1154, 1156), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (1156, 1157), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1162, 1184), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (1162, 1176), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (1162, 1169), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (1169, 1169), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (1169, 1176), rule: SignalDeclarationConnectionKW, content: "output " })] }), Terminal(TerminalToken { span: (1176, 1179), rule: E_VariableName, content: "out" }), NonTerminal(NonTerminalToken { span: (1179, 1184), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (1179, 1180), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1180, 1183), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1180, 1183), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1180, 1183), rule: E_Decimal, content: "254" })] })] }), Terminal(TerminalToken { span: (1183, 1184), rule: ArrayDeclarationOperatorClose, content: "]" })] })] }), Terminal(TerminalToken { span: (1184, 1185), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1191, 1226), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1191, 1201), rule: ComponentDeclarationKW, content: "component " }), Terminal(TerminalToken { span: (1201, 1211), rule: E_VariableName, content: "aliasCheck" }), NonTerminal(NonTerminalToken { span: (1214, 1226), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1214, 1224), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1214, 1224), rule: E_VariableName, content: "AliasCheck" })] }), Terminal(TerminalToken { span: (1224, 1225), rule: E_20_BracedOperatorOpen, content: "(" }), Terminal(TerminalToken { span: (1225, 1226), rule: E_20_BracedOperatorClose, content: ")" })] })] }), Terminal(TerminalToken { span: (1226, 1227), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1232, 1261), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1232, 1242), rule: ComponentDeclarationKW, content: "component " }), Terminal(TerminalToken { span: (1242, 1245), rule: E_VariableName, content: "n2b" }), NonTerminal(NonTerminalToken { span: (1248, 1261), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1248, 1256), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1248, 1256), rule: E_VariableName, content: "Num2Bits" })] }), Terminal(TerminalToken { span: (1256, 1257), rule: E_20_BracedOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (1257, 1260), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1257, 1260), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1257, 1260), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1257, 1260), rule: E_Decimal, content: "254" })] })] })] }), Terminal(TerminalToken { span: (1260, 1261), rule: E_20_BracedOperatorClose, content: ")" })] })] }), Terminal(TerminalToken { span: (1261, 1262), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1267, 1280), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1267, 1269), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1267, 1269), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (1270, 1273), rule: E_3_SignalRightHandOperator, content: "==>" }), NonTerminal(NonTerminalToken { span: (1274, 1277), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1274, 1277), rule: E_VariableName, content: "n2b" })] }), Terminal(TerminalToken { span: (1277, 1278), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (1278, 1280), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1278, 1280), rule: E_VariableName, content: "in" })] })] }), Terminal(TerminalToken { span: (1280, 1281), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1287, 1392), rule: ForStatement, subrules: [Terminal(TerminalToken { span: (1287, 1290), rule: ForKW, content: "for" }), NonTerminal(NonTerminalToken { span: (1292, 1299), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1292, 1296), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (1296, 1297), rule: E_VariableName, content: "i" }), NonTerminal(NonTerminalToken { span: (1298, 1299), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1298, 1299), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1298, 1299), rule: E_Decimal, content: "0" })] })] })] }), NonTerminal(NonTerminalToken { span: (1301, 1306), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1301, 1302), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1301, 1302), rule: E_VariableName, content: "i" })] }), Terminal(TerminalToken { span: (1302, 1303), rule: E_12_RelationalOrderingOperator, content: "<" }), NonTerminal(NonTerminalToken { span: (1303, 1306), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1303, 1306), rule: E_Decimal, content: "254" })] })] }), NonTerminal(NonTerminalToken { span: (1308, 1311), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1308, 1309), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1308, 1309), rule: E_VariableName, content: "i" })] }), Terminal(TerminalToken { span: (1309, 1311), rule: E_18_PostfixOperator, content: "++" })] }), NonTerminal(NonTerminalToken { span: (1313, 1392), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (1323, 1344), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1323, 1326), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1323, 1326), rule: E_VariableName, content: "n2b" })] }), Terminal(TerminalToken { span: (1326, 1327), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (1327, 1330), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1327, 1330), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (1330, 1331), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1331, 1332), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1331, 1332), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1331, 1332), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1331, 1332), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (1332, 1333), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (1334, 1337), rule: E_3_SignalRightHandOperator, content: "==>" }), NonTerminal(NonTerminalToken { span: (1338, 1341), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1338, 1341), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (1341, 1342), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1342, 1343), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1342, 1343), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1342, 1343), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1342, 1343), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (1343, 1344), rule: E_20_BracedOperatorClose, content: "]" })] }), Terminal(TerminalToken { span: (1344, 1345), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1354, 1385), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1354, 1357), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1354, 1357), rule: E_VariableName, content: "n2b" })] }), Terminal(TerminalToken { span: (1357, 1358), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (1358, 1361), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1358, 1361), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (1361, 1362), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1362, 1363), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1362, 1363), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1362, 1363), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1362, 1363), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (1363, 1364), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (1365, 1368), rule: E_3_SignalRightHandOperator, content: "==>" }), NonTerminal(NonTerminalToken { span: (1369, 1379), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1369, 1379), rule: E_VariableName, content: "aliasCheck" })] }), Terminal(TerminalToken { span: (1379, 1380), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (1380, 1382), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1380, 1382), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (1382, 1383), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1383, 1384), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1383, 1384), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1383, 1384), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1383, 1384), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (1384, 1385), rule: E_20_BracedOperatorClose, content: "]" })] }), Terminal(TerminalToken { span: (1385, 1386), rule: END_OF_LINE, content: ";" })] })] })] })] }), NonTerminal(NonTerminalToken { span: (1396, 1604), rule: TemplateBlock, subrules: [Terminal(TerminalToken { span: (1396, 1405), rule: TemplateKW, content: "template " }), Terminal(TerminalToken { span: (1405, 1413), rule: TemplateName, content: "Bits2Num" }), NonTerminal(NonTerminalToken { span: (1413, 1416), rule: Parameters, subrules: [Terminal(TerminalToken { span: (1414, 1415), rule: VariableName, content: "n" })] }), NonTerminal(NonTerminalToken { span: (1417, 1604), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (1423, 1441), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (1423, 1436), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (1423, 1430), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (1430, 1430), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (1430, 1436), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (1436, 1438), rule: E_VariableName, content: "in" }), NonTerminal(NonTerminalToken { span: (1438, 1441), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (1438, 1439), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1439, 1440), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1439, 1440), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1439, 1440), rule: E_VariableName, content: "n" })] })] }), Terminal(TerminalToken { span: (1440, 1441), rule: ArrayDeclarationOperatorClose, content: "]" })] })] }), Terminal(TerminalToken { span: (1441, 1442), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1447, 1464), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (1447, 1461), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (1447, 1454), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (1454, 1454), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (1454, 1461), rule: SignalDeclarationConnectionKW, content: "output " })] }), Terminal(TerminalToken { span: (1461, 1464), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (1464, 1465), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1470, 1479), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1470, 1474), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (1474, 1477), rule: E_VariableName, content: "lc1" }), NonTerminal(NonTerminalToken { span: (1478, 1479), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1478, 1479), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1478, 1479), rule: E_Decimal, content: "0" })] })] })] }), Terminal(TerminalToken { span: (1479, 1480), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1486, 1496), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1486, 1490), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (1490, 1492), rule: E_VariableName, content: "e2" }), NonTerminal(NonTerminalToken { span: (1495, 1496), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1495, 1496), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1495, 1496), rule: E_Decimal, content: "1" })] })] })] }), Terminal(TerminalToken { span: (1496, 1497), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1502, 1584), rule: ForStatement, subrules: [Terminal(TerminalToken { span: (1502, 1505), rule: ForKW, content: "for" }), NonTerminal(NonTerminalToken { span: (1507, 1516), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1507, 1511), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (1511, 1512), rule: E_VariableName, content: "i" }), NonTerminal(NonTerminalToken { span: (1515, 1516), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1515, 1516), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1515, 1516), rule: E_Decimal, content: "0" })] })] })] }), NonTerminal(NonTerminalToken { span: (1518, 1521), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1518, 1519), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1518, 1519), rule: E_VariableName, content: "i" })] }), Terminal(TerminalToken { span: (1519, 1520), rule: E_12_RelationalOrderingOperator, content: "<" }), NonTerminal(NonTerminalToken { span: (1520, 1521), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1520, 1521), rule: E_VariableName, content: "n" })] })] }), NonTerminal(NonTerminalToken { span: (1523, 1526), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1523, 1524), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1523, 1524), rule: E_VariableName, content: "i" })] }), Terminal(TerminalToken { span: (1524, 1526), rule: E_18_PostfixOperator, content: "++" })] }), NonTerminal(NonTerminalToken { span: (1528, 1584), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (1538, 1555), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1538, 1541), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1538, 1541), rule: E_VariableName, content: "lc1" })] }), Terminal(TerminalToken { span: (1542, 1544), rule: E_4_AssignmentOperator, content: "+=" }), NonTerminal(NonTerminalToken { span: (1545, 1547), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1545, 1547), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (1547, 1548), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1548, 1549), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1548, 1549), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1548, 1549), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1548, 1549), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (1549, 1550), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (1551, 1552), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (1553, 1555), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1553, 1555), rule: E_VariableName, content: "e2" })] })] }), Terminal(TerminalToken { span: (1555, 1556), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1565, 1577), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1565, 1567), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1565, 1567), rule: E_VariableName, content: "e2" })] }), Terminal(TerminalToken { span: (1568, 1570), rule: E_4_AssignmentOperator, content: "= " }), NonTerminal(NonTerminalToken { span: (1570, 1572), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1570, 1572), rule: E_VariableName, content: "e2" })] }), Terminal(TerminalToken { span: (1573, 1574), rule: E_14_SumOperator, content: "+" }), NonTerminal(NonTerminalToken { span: (1575, 1577), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1575, 1577), rule: E_VariableName, content: "e2" })] })] }), Terminal(TerminalToken { span: (1577, 1578), rule: END_OF_LINE, content: ";" })] })] }), NonTerminal(NonTerminalToken { span: (1590, 1601), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1590, 1593), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1590, 1593), rule: E_VariableName, content: "lc1" })] }), Terminal(TerminalToken { span: (1594, 1597), rule: E_3_SignalRightHandOperator, content: "==>" }), NonTerminal(NonTerminalToken { span: (1598, 1601), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1598, 1601), rule: E_VariableName, content: "out" })] })] }), Terminal(TerminalToken { span: (1601, 1602), rule: END_OF_LINE, content: ";" })] })] }), NonTerminal(NonTerminalToken { span: (1606, 1888), rule: TemplateBlock, subrules: [Terminal(TerminalToken { span: (1606, 1615), rule: TemplateKW, content: "template " }), Terminal(TerminalToken { span: (1615, 1630), rule: TemplateName, content: "Bits2Num_strict" }), Terminal(TerminalToken { span: (1630, 1632), rule: Parameters, content: "()" }), NonTerminal(NonTerminalToken { span: (1633, 1888), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (1639, 1659), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (1639, 1652), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (1639, 1646), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (1646, 1646), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (1646, 1652), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (1652, 1654), rule: E_VariableName, content: "in" }), NonTerminal(NonTerminalToken { span: (1654, 1659), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (1654, 1655), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1655, 1658), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1655, 1658), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1655, 1658), rule: E_Decimal, content: "254" })] })] }), Terminal(TerminalToken { span: (1658, 1659), rule: ArrayDeclarationOperatorClose, content: "]" })] })] }), Terminal(TerminalToken { span: (1659, 1660), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1665, 1682), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (1665, 1679), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (1665, 1672), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (1672, 1672), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (1672, 1679), rule: SignalDeclarationConnectionKW, content: "output " })] }), Terminal(TerminalToken { span: (1679, 1682), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (1682, 1683), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1689, 1724), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1689, 1699), rule: ComponentDeclarationKW, content: "component " }), Terminal(TerminalToken { span: (1699, 1709), rule: E_VariableName, content: "aliasCheck" }), NonTerminal(NonTerminalToken { span: (1712, 1724), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1712, 1722), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1712, 1722), rule: E_VariableName, content: "AliasCheck" })] }), Terminal(TerminalToken { span: (1722, 1723), rule: E_20_BracedOperatorOpen, content: "(" }), Terminal(TerminalToken { span: (1723, 1724), rule: E_20_BracedOperatorClose, content: ")" })] })] }), Terminal(TerminalToken { span: (1724, 1725), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1730, 1759), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1730, 1740), rule: ComponentDeclarationKW, content: "component " }), Terminal(TerminalToken { span: (1740, 1743), rule: E_VariableName, content: "b2n" }), NonTerminal(NonTerminalToken { span: (1746, 1759), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1746, 1754), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1746, 1754), rule: E_VariableName, content: "Bits2Num" })] }), Terminal(TerminalToken { span: (1754, 1755), rule: E_20_BracedOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (1755, 1758), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1755, 1758), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1755, 1758), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1755, 1758), rule: E_Decimal, content: "254" })] })] })] }), Terminal(TerminalToken { span: (1758, 1759), rule: E_20_BracedOperatorClose, content: ")" })] })] }), Terminal(TerminalToken { span: (1759, 1760), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1766, 1864), rule: ForStatement, subrules: [Terminal(TerminalToken { span: (1766, 1769), rule: ForKW, content: "for" }), NonTerminal(NonTerminalToken { span: (1771, 1778), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1771, 1775), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (1775, 1776), rule: E_VariableName, content: "i" }), NonTerminal(NonTerminalToken { span: (1777, 1778), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1777, 1778), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1777, 1778), rule: E_Decimal, content: "0" })] })] })] }), NonTerminal(NonTerminalToken { span: (1780, 1785), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1780, 1781), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1780, 1781), rule: E_VariableName, content: "i" })] }), Terminal(TerminalToken { span: (1781, 1782), rule: E_12_RelationalOrderingOperator, content: "<" }), NonTerminal(NonTerminalToken { span: (1782, 1785), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1782, 1785), rule: E_Decimal, content: "254" })] })] }), NonTerminal(NonTerminalToken { span: (1787, 1790), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1787, 1788), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1787, 1788), rule: E_VariableName, content: "i" })] }), Terminal(TerminalToken { span: (1788, 1790), rule: E_18_PostfixOperator, content: "++" })] }), NonTerminal(NonTerminalToken { span: (1792, 1864), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (1802, 1821), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1802, 1804), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1802, 1804), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (1804, 1805), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1805, 1806), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1805, 1806), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1805, 1806), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1805, 1806), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (1806, 1807), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (1808, 1811), rule: E_3_SignalRightHandOperator, content: "==>" }), NonTerminal(NonTerminalToken { span: (1812, 1815), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1812, 1815), rule: E_VariableName, content: "b2n" })] }), Terminal(TerminalToken { span: (1815, 1816), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (1816, 1818), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1816, 1818), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (1818, 1819), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1819, 1820), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1819, 1820), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1819, 1820), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1819, 1820), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (1820, 1821), rule: E_20_BracedOperatorClose, content: "]" })] }), Terminal(TerminalToken { span: (1821, 1822), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1831, 1857), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1831, 1833), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1831, 1833), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (1833, 1834), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1834, 1835), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1834, 1835), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1834, 1835), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1834, 1835), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (1835, 1836), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (1837, 1840), rule: E_3_SignalRightHandOperator, content: "==>" }), NonTerminal(NonTerminalToken { span: (1841, 1851), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1841, 1851), rule: E_VariableName, content: "aliasCheck" })] }), Terminal(TerminalToken { span: (1851, 1852), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (1852, 1854), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1852, 1854), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (1854, 1855), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1855, 1856), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1855, 1856), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1855, 1856), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1855, 1856), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (1856, 1857), rule: E_20_BracedOperatorClose, content: "]" })] }), Terminal(TerminalToken { span: (1857, 1858), rule: END_OF_LINE, content: ";" })] })] }), NonTerminal(NonTerminalToken { span: (1870, 1885), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1870, 1873), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1870, 1873), rule: E_VariableName, content: "b2n" })] }), Terminal(TerminalToken { span: (1873, 1874), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (1874, 1877), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1874, 1877), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (1878, 1881), rule: E_3_SignalRightHandOperator, content: "==>" }), NonTerminal(NonTerminalToken { span: (1882, 1885), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1882, 1885), rule: E_VariableName, content: "out" })] })] }), Terminal(TerminalToken { span: (1885, 1886), rule: END_OF_LINE, content: ";" })] })] }), NonTerminal(NonTerminalToken { span: (1890, 2275), rule: TemplateBlock, subrules: [Terminal(TerminalToken { span: (1890, 1899), rule: TemplateKW, content: "template " }), Terminal(TerminalToken { span: (1899, 1910), rule: TemplateName, content: "Num2BitsNeg" }), NonTerminal(NonTerminalToken { span: (1910, 1913), rule: Parameters, subrules: [Terminal(TerminalToken { span: (1911, 1912), rule: VariableName, content: "n" })] }), NonTerminal(NonTerminalToken { span: (1914, 2275), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (1920, 1935), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (1920, 1933), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (1920, 1927), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (1927, 1927), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (1927, 1933), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (1933, 1935), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (1935, 1936), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1941, 1961), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (1941, 1955), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (1941, 1948), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (1948, 1948), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (1948, 1955), rule: SignalDeclarationConnectionKW, content: "output " })] }), Terminal(TerminalToken { span: (1955, 1958), rule: E_VariableName, content: "out" }), NonTerminal(NonTerminalToken { span: (1958, 1961), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (1958, 1959), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1959, 1960), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1959, 1960), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1959, 1960), rule: E_VariableName, content: "n" })] })] }), Terminal(TerminalToken { span: (1960, 1961), rule: ArrayDeclarationOperatorClose, content: "]" })] })] }), Terminal(TerminalToken { span: (1961, 1962), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1967, 1976), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1967, 1971), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (1971, 1974), rule: E_VariableName, content: "lc1" }), NonTerminal(NonTerminalToken { span: (1975, 1976), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1975, 1976), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1975, 1976), rule: E_Decimal, content: "0" })] })] })] }), Terminal(TerminalToken { span: (1976, 1977), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1983, 1999), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1983, 1993), rule: ComponentDeclarationKW, content: "component " }), Terminal(TerminalToken { span: (1993, 1999), rule: E_VariableName, content: "isZero" })] }), Terminal(TerminalToken { span: (1999, 2000), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (2006, 2023), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2006, 2012), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2006, 2012), rule: E_VariableName, content: "isZero" })] }), Terminal(TerminalToken { span: (2013, 2015), rule: E_4_AssignmentOperator, content: "= " }), NonTerminal(NonTerminalToken { span: (2015, 2021), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2015, 2021), rule: E_VariableName, content: "IsZero" })] }), Terminal(TerminalToken { span: (2021, 2022), rule: E_20_BracedOperatorOpen, content: "(" }), Terminal(TerminalToken { span: (2022, 2023), rule: E_20_BracedOperatorClose, content: ")" })] }), Terminal(TerminalToken { span: (2023, 2024), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (2030, 2062), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (2030, 2034), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (2034, 2037), rule: E_VariableName, content: "neg" }), NonTerminal(NonTerminalToken { span: (2040, 2062), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2040, 2041), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2040, 2041), rule: E_VariableName, content: "n" })] }), Terminal(TerminalToken { span: (2042, 2045), rule: E_11_RelationalEqualityOperator, content: "== " }), NonTerminal(NonTerminalToken { span: (2045, 2046), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2045, 2046), rule: E_Decimal, content: "0" })] }), Terminal(TerminalToken { span: (2047, 2048), rule: E_5_TernaryFirstOperator, content: "?" }), NonTerminal(NonTerminalToken { span: (2049, 2050), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2049, 2050), rule: E_Decimal, content: "0" })] }), Terminal(TerminalToken { span: (2051, 2052), rule: E_5_TernarySecondOperator, content: ":" }), NonTerminal(NonTerminalToken { span: (2053, 2054), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2053, 2054), rule: E_Decimal, content: "2" })] }), Terminal(TerminalToken { span: (2054, 2056), rule: E_16_ExponentialOperator, content: "**" }), NonTerminal(NonTerminalToken { span: (2056, 2057), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2056, 2057), rule: E_VariableName, content: "n" })] }), Terminal(TerminalToken { span: (2058, 2059), rule: E_14_SumOperator, content: "-" }), NonTerminal(NonTerminalToken { span: (2060, 2062), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2060, 2062), rule: E_VariableName, content: "in" })] })] })] }), Terminal(TerminalToken { span: (2062, 2063), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (2069, 2204), rule: ForStatement, subrules: [Terminal(TerminalToken { span: (2069, 2072), rule: ForKW, content: "for" }), NonTerminal(NonTerminalToken { span: (2074, 2083), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (2074, 2078), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (2078, 2079), rule: E_VariableName, content: "i" }), NonTerminal(NonTerminalToken { span: (2082, 2083), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2082, 2083), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2082, 2083), rule: E_Decimal, content: "0" })] })] })] }), NonTerminal(NonTerminalToken { span: (2085, 2088), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2085, 2086), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2085, 2086), rule: E_VariableName, content: "i" })] }), Terminal(TerminalToken { span: (2086, 2087), rule: E_12_RelationalOrderingOperator, content: "<" }), NonTerminal(NonTerminalToken { span: (2087, 2088), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2087, 2088), rule: E_VariableName, content: "n" })] })] }), NonTerminal(NonTerminalToken { span: (2090, 2093), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2090, 2091), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2090, 2091), rule: E_VariableName, content: "i" })] }), Terminal(TerminalToken { span: (2091, 2093), rule: E_18_PostfixOperator, content: "++" })] }), NonTerminal(NonTerminalToken { span: (2095, 2204), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (2105, 2130), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2105, 2108), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2105, 2108), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (2108, 2109), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (2109, 2110), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (2109, 2110), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2109, 2110), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2109, 2110), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (2110, 2111), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (2112, 2115), rule: E_2_SignalLeftHandOperator, content: "<--" }), NonTerminal(NonTerminalToken { span: (2116, 2126), rule: E_Value, subrules: [NonTerminal(NonTerminalToken { span: (2116, 2126), rule: E_Brackets, subrules: [Terminal(TerminalToken { span: (2116, 2117), rule: E_BracketsOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (2117, 2125), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2117, 2120), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2117, 2120), rule: E_VariableName, content: "neg" })] }), Terminal(TerminalToken { span: (2121, 2123), rule: E_13_BitwiseShiftOperator, content: ">>" }), NonTerminal(NonTerminalToken { span: (2124, 2125), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2124, 2125), rule: E_VariableName, content: "i" })] })] }), Terminal(TerminalToken { span: (2125, 2126), rule: E_BracketsOperatorclose, content: ")" })] })] }), Terminal(TerminalToken { span: (2127, 2128), rule: E_10_BitwiseAndOperator, content: "&" }), NonTerminal(NonTerminalToken { span: (2129, 2130), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2129, 2130), rule: E_Decimal, content: "1" })] })] }), Terminal(TerminalToken { span: (2130, 2131), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (2140, 2167), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2140, 2143), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2140, 2143), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (2143, 2144), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (2144, 2145), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (2144, 2145), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2144, 2145), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2144, 2145), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (2145, 2146), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (2147, 2148), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (2149, 2161), rule: E_Value, subrules: [NonTerminal(NonTerminalToken { span: (2149, 2161), rule: E_Brackets, subrules: [Terminal(TerminalToken { span: (2149, 2150), rule: E_BracketsOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (2150, 2160), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2150, 2153), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2150, 2153), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (2153, 2154), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (2154, 2155), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (2154, 2155), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2154, 2155), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2154, 2155), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (2155, 2156), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (2157, 2158), rule: E_14_SumOperator, content: "-" }), NonTerminal(NonTerminalToken { span: (2158, 2159), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2158, 2159), rule: E_Decimal, content: "1" })] })] }), Terminal(TerminalToken { span: (2160, 2161), rule: E_BracketsOperatorclose, content: ")" })] })] }), Terminal(TerminalToken { span: (2162, 2165), rule: E_1_SignalAssertionConstraintOperator, content: "===" }), NonTerminal(NonTerminalToken { span: (2166, 2167), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2166, 2167), rule: E_Decimal, content: "0" })] })] }), Terminal(TerminalToken { span: (2167, 2168), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (2177, 2197), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2177, 2180), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2177, 2180), rule: E_VariableName, content: "lc1" })] }), Terminal(TerminalToken { span: (2181, 2183), rule: E_4_AssignmentOperator, content: "+=" }), NonTerminal(NonTerminalToken { span: (2184, 2187), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2184, 2187), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (2187, 2188), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (2188, 2189), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (2188, 2189), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2188, 2189), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2188, 2189), rule: E_VariableName, content: "i" })] })] })] }), Terminal(TerminalToken { span: (2189, 2190), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (2191, 2192), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (2193, 2194), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2193, 2194), rule: E_Decimal, content: "2" })] }), Terminal(TerminalToken { span: (2194, 2196), rule: E_16_ExponentialOperator, content: "**" }), NonTerminal(NonTerminalToken { span: (2196, 2197), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2196, 2197), rule: E_VariableName, content: "i" })] })] }), Terminal(TerminalToken { span: (2197, 2198), rule: END_OF_LINE, content: ";" })] })] }), NonTerminal(NonTerminalToken { span: (2210, 2226), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2210, 2212), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2210, 2212), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (2213, 2216), rule: E_3_SignalRightHandOperator, content: "==>" }), NonTerminal(NonTerminalToken { span: (2217, 2223), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2217, 2223), rule: E_VariableName, content: "isZero" })] }), Terminal(TerminalToken { span: (2223, 2224), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (2224, 2226), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2224, 2226), rule: E_VariableName, content: "in" })] })] }), Terminal(TerminalToken { span: (2226, 2227), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (2235, 2272), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2235, 2238), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2235, 2238), rule: E_VariableName, content: "lc1" })] }), Terminal(TerminalToken { span: (2239, 2240), rule: E_14_SumOperator, content: "+" }), NonTerminal(NonTerminalToken { span: (2241, 2247), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2241, 2247), rule: E_VariableName, content: "isZero" })] }), Terminal(TerminalToken { span: (2247, 2248), rule: E_19_MemberAccessOperator, content: "." }), NonTerminal(NonTerminalToken { span: (2248, 2251), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2248, 2251), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (2252, 2253), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (2254, 2255), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2254, 2255), rule: E_Decimal, content: "2" })] }), Terminal(TerminalToken { span: (2255, 2257), rule: E_16_ExponentialOperator, content: "**" }), NonTerminal(NonTerminalToken { span: (2257, 2258), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2257, 2258), rule: E_VariableName, content: "n" })] }), Terminal(TerminalToken { span: (2259, 2262), rule: E_1_SignalAssertionConstraintOperator, content: "===" }), NonTerminal(NonTerminalToken { span: (2263, 2264), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2263, 2264), rule: E_Decimal, content: "2" })] }), Terminal(TerminalToken { span: (2264, 2266), rule: E_16_ExponentialOperator, content: "**" }), NonTerminal(NonTerminalToken { span: (2266, 2267), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2266, 2267), rule: E_VariableName, content: "n" })] }), Terminal(TerminalToken { span: (2268, 2269), rule: E_14_SumOperator, content: "-" }), NonTerminal(NonTerminalToken { span: (2270, 2272), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2270, 2272), rule: E_VariableName, content: "in" })] })] }), Terminal(TerminalToken { span: (2272, 2273), rule: END_OF_LINE, content: ";" })] })] }), Terminal(TerminalToken { span: (2276, 2276), rule: EOI, content: "" })] })][NonTerminal(NonTerminalToken { span: (0, 2264), rule: Circuit, subrules: [Terminal(TerminalToken { span: (0, 747), rule: COMMENT, content: "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of circom (Zero Knowledge Circuit Compiler).\n\n    circom is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    circom is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with circom. If not, see <https://www.gnu.org/licenses/>.\n*/" }), Terminal(TerminalToken { span: (749, 1435), rule: COMMENT, content: "/*\n\nBinary Sum\n==========\n\nThis component creates a binary sum componet of ops operands and n bits each operand.\n\ne is Number of carries: Depends on the number of operands in the input.\n\nMain Constraint:\n   in[0][0]     * 2^0  +  in[0][1]     * 2^1  + ..... + in[0][n-1]    * 2^(n-1)  +\n + in[1][0]     * 2^0  +  in[1][1]     * 2^1  + ..... + in[1][n-1]    * 2^(n-1)  +\n + ..\n + in[ops-1][0] * 2^0  +  in[ops-1][1] * 2^1  + ..... + in[ops-1][n-1] * 2^(n-1)  +\n ===\n   out[0] * 2^0  + out[1] * 2^1 +   + out[n+e-1] *2(n+e-1)\n\nTo waranty binary outputs:\n\n    out[0]     * (out[0] - 1) === 0\n    out[1]     * (out[0] - 1) === 0\n    .\n    .\n    .\n    out[n+e-1] * (out[n+e-1] - 1) == 0\n\n */" }), Terminal(TerminalToken { span: (1438, 1532), rule: COMMENT, content: "/*\n    This function calculates the number of extra bits in the output to do the full sum.\n */" }), NonTerminal(NonTerminalToken { span: (1534, 1556), rule: CompilerDirective, subrules: [Terminal(TerminalToken { span: (1534, 1541), rule: PragmaKW, content: "pragma " }), Terminal(TerminalToken { span: (1541, 1548), rule: CircomKW, content: "circom " }), NonTerminal(NonTerminalToken { span: (1548, 1554), rule: E_SemVer, subrules: [Terminal(TerminalToken { span: (1548, 1549), rule: E_Decimal, content: "2" }), Terminal(TerminalToken { span: (1550, 1551), rule: E_Decimal, content: "0" }), Terminal(TerminalToken { span: (1552, 1553), rule: E_Decimal, content: "0" })] })] }), NonTerminal(NonTerminalToken { span: (1556, 1676), rule: FunctionBlock, subrules: [Terminal(TerminalToken { span: (1556, 1565), rule: FunctionKW, content: "function " }), Terminal(TerminalToken { span: (1565, 1570), rule: FunctionName, content: "nbits" }), NonTerminal(NonTerminalToken { span: (1570, 1573), rule: Parameters, subrules: [Terminal(TerminalToken { span: (1571, 1572), rule: VariableName, content: "a" })] }), NonTerminal(NonTerminalToken { span: (1574, 1676), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (1580, 1589), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1580, 1584), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (1584, 1585), rule: E_VariableName, content: "n" }), NonTerminal(NonTerminalToken { span: (1588, 1589), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1588, 1589), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1588, 1589), rule: E_Decimal, content: "1" })] })] })] }), Terminal(TerminalToken { span: (1589, 1590), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1595, 1604), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1595, 1599), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (1599, 1600), rule: E_VariableName, content: "r" }), NonTerminal(NonTerminalToken { span: (1603, 1604), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1603, 1604), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1603, 1604), rule: E_Decimal, content: "0" })] })] })] }), Terminal(TerminalToken { span: (1604, 1605), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1610, 1660), rule: WhileStatement, subrules: [Terminal(TerminalToken { span: (1610, 1615), rule: WhileKW, content: "while" }), NonTerminal(NonTerminalToken { span: (1617, 1622), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1617, 1618), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1617, 1618), rule: E_VariableName, content: "n" })] }), Terminal(TerminalToken { span: (1618, 1619), rule: E_14_SumOperator, content: "-" }), NonTerminal(NonTerminalToken { span: (1619, 1620), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1619, 1620), rule: E_Decimal, content: "1" })] }), Terminal(TerminalToken { span: (1620, 1621), rule: E_12_RelationalOrderingOperator, content: "<" }), NonTerminal(NonTerminalToken { span: (1621, 1622), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1621, 1622), rule: E_VariableName, content: "a" })] })] }), NonTerminal(NonTerminalToken { span: (1624, 1660), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (1634, 1637), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1634, 1635), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1634, 1635), rule: E_VariableName, content: "r" })] }), Terminal(TerminalToken { span: (1635, 1637), rule: E_18_PostfixOperator, content: "++" })] }), Terminal(TerminalToken { span: (1637, 1638), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1647, 1653), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1647, 1648), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1647, 1648), rule: E_VariableName, content: "n" })] }), Terminal(TerminalToken { span: (1649, 1651), rule: E_4_AssignmentOperator, content: "*=" }), NonTerminal(NonTerminalToken { span: (1652, 1653), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1652, 1653), rule: E_Decimal, content: "2" })] })] }), Terminal(TerminalToken { span: (1653, 1654), rule: END_OF_LINE, content: ";" })] })] }), NonTerminal(NonTerminalToken { span: (1665, 1673), rule: ReturnStatement, subrules: [Terminal(TerminalToken { span: (1665, 1672), rule: ReturnKW, content: "return " }), NonTerminal(NonTerminalToken { span: (1672, 1673), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1672, 1673), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1672, 1673), rule: E_VariableName, content: "r" })] })] })] }), Terminal(TerminalToken { span: (1673, 1674), rule: END_OF_LINE, content: ";" })] })] }), NonTerminal(NonTerminalToken { span: (1679, 2263), rule: TemplateBlock, subrules: [Terminal(TerminalToken { span: (1679, 1688), rule: TemplateKW, content: "template " }), Terminal(TerminalToken { span: (1688, 1694), rule: TemplateName, content: "BinSum" }), NonTerminal(NonTerminalToken { span: (1694, 1702), rule: Parameters, subrules: [Terminal(TerminalToken { span: (1695, 1696), rule: VariableName, content: "n" }), Terminal(TerminalToken { span: (1698, 1701), rule: VariableName, content: "ops" })] }), NonTerminal(NonTerminalToken { span: (1703, 2263), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (1709, 1740), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1709, 1713), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (1713, 1717), rule: E_VariableName, content: "nout" }), NonTerminal(NonTerminalToken { span: (1720, 1740), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1720, 1725), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1720, 1725), rule: E_VariableName, content: "nbits" })] }), Terminal(TerminalToken { span: (1725, 1726), rule: E_20_BracedOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (1726, 1739), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1726, 1739), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1726, 1735), rule: E_Value, subrules: [NonTerminal(NonTerminalToken { span: (1726, 1735), rule: E_Brackets, subrules: [Terminal(TerminalToken { span: (1726, 1727), rule: E_BracketsOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (1727, 1734), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1727, 1728), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1727, 1728), rule: E_Decimal, content: "2" })] }), Terminal(TerminalToken { span: (1728, 1730), rule: E_16_ExponentialOperator, content: "**" }), NonTerminal(NonTerminalToken { span: (1730, 1731), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1730, 1731), rule: E_VariableName, content: "n" })] }), Terminal(TerminalToken { span: (1732, 1733), rule: E_14_SumOperator, content: "-" }), NonTerminal(NonTerminalToken { span: (1733, 1734), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1733, 1734), rule: E_Decimal, content: "1" })] })] }), Terminal(TerminalToken { span: (1734, 1735), rule: E_BracketsOperatorclose, content: ")" })] })] }), Terminal(TerminalToken { span: (1735, 1736), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (1736, 1739), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1736, 1739), rule: E_VariableName, content: "ops" })] })] })] }), Terminal(TerminalToken { span: (1739, 1740), rule: E_20_BracedOperatorClose, content: ")" })] })] }), Terminal(TerminalToken { span: (1740, 1741), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1746, 1769), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (1746, 1759), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (1746, 1753), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (1753, 1753), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (1753, 1759), rule: SignalDeclarationConnectionKW, content: "input " })] }), Terminal(TerminalToken { span: (1759, 1761), rule: E_VariableName, content: "in" }), NonTerminal(NonTerminalToken { span: (1761, 1766), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (1761, 1762), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1762, 1765), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1762, 1765), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1762, 1765), rule: E_VariableName, content: "ops" })] })] }), Terminal(TerminalToken { span: (1765, 1766), rule: ArrayDeclarationOperatorClose, content: "]" })] }), NonTerminal(NonTerminalToken { span: (1766, 1769), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (1766, 1767), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1767, 1768), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1767, 1768), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1767, 1768), rule: E_VariableName, content: "n" })] })] }), Terminal(TerminalToken { span: (1768, 1769), rule: ArrayDeclarationOperatorClose, content: "]" })] })] }), Terminal(TerminalToken { span: (1769, 1770), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1775, 1798), rule: DeclarationStatement, subrules: [NonTerminal(NonTerminalToken { span: (1775, 1789), rule: SignalDeclarationKW, subrules: [Terminal(TerminalToken { span: (1775, 1782), rule: SignalDeclarationMainKW, content: "signal " }), Terminal(TerminalToken { span: (1782, 1782), rule: SignalDeclarationVisibilityKW, content: "" }), Terminal(TerminalToken { span: (1782, 1789), rule: SignalDeclarationConnectionKW, content: "output " })] }), Terminal(TerminalToken { span: (1789, 1792), rule: E_VariableName, content: "out" }), NonTerminal(NonTerminalToken { span: (1792, 1798), rule: ArrayDeclaration, subrules: [Terminal(TerminalToken { span: (1792, 1793), rule: ArrayDeclarationOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1793, 1797), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1793, 1797), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1793, 1797), rule: E_VariableName, content: "nout" })] })] }), Terminal(TerminalToken { span: (1797, 1798), rule: ArrayDeclarationOperatorClose, content: "]" })] })] }), Terminal(TerminalToken { span: (1798, 1799), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1805, 1816), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1805, 1809), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (1809, 1812), rule: E_VariableName, content: "lin" }), NonTerminal(NonTerminalToken { span: (1815, 1816), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1815, 1816), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1815, 1816), rule: E_Decimal, content: "0" })] })] })] }), Terminal(TerminalToken { span: (1816, 1817), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1822, 1834), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1822, 1826), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (1826, 1830), rule: E_VariableName, content: "lout" }), NonTerminal(NonTerminalToken { span: (1833, 1834), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1833, 1834), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1833, 1834), rule: E_Decimal, content: "0" })] })] })] }), Terminal(TerminalToken { span: (1834, 1835), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1841, 1846), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1841, 1845), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (1845, 1846), rule: E_VariableName, content: "k" })] }), Terminal(TerminalToken { span: (1846, 1847), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1852, 1857), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1852, 1856), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (1856, 1857), rule: E_VariableName, content: "j" })] }), Terminal(TerminalToken { span: (1857, 1858), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1864, 1870), rule: DeclarationStatement, subrules: [Terminal(TerminalToken { span: (1864, 1868), rule: VariableDeclarationKW, content: "var " }), Terminal(TerminalToken { span: (1868, 1870), rule: E_VariableName, content: "e2" })] }), Terminal(TerminalToken { span: (1870, 1871), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1877, 1883), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1877, 1879), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1877, 1879), rule: E_VariableName, content: "e2" })] }), Terminal(TerminalToken { span: (1880, 1882), rule: E_4_AssignmentOperator, content: "= " }), NonTerminal(NonTerminalToken { span: (1882, 1883), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1882, 1883), rule: E_Decimal, content: "1" })] })] }), Terminal(TerminalToken { span: (1883, 1884), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (1889, 2014), rule: ForStatement, subrules: [Terminal(TerminalToken { span: (1889, 1892), rule: ForKW, content: "for" }), NonTerminal(NonTerminalToken { span: (1894, 1897), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1894, 1895), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1894, 1895), rule: E_VariableName, content: "k" })] }), Terminal(TerminalToken { span: (1895, 1896), rule: E_4_AssignmentOperator, content: "=" }), NonTerminal(NonTerminalToken { span: (1896, 1897), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1896, 1897), rule: E_Decimal, content: "0" })] })] }), NonTerminal(NonTerminalToken { span: (1899, 1902), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1899, 1900), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1899, 1900), rule: E_VariableName, content: "k" })] }), Terminal(TerminalToken { span: (1900, 1901), rule: E_12_RelationalOrderingOperator, content: "<" }), NonTerminal(NonTerminalToken { span: (1901, 1902), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1901, 1902), rule: E_VariableName, content: "n" })] })] }), NonTerminal(NonTerminalToken { span: (1904, 1907), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1904, 1905), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1904, 1905), rule: E_VariableName, content: "k" })] }), Terminal(TerminalToken { span: (1905, 1907), rule: E_18_PostfixOperator, content: "++" })] }), NonTerminal(NonTerminalToken { span: (1909, 2014), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (1919, 1986), rule: ForStatement, subrules: [Terminal(TerminalToken { span: (1919, 1922), rule: ForKW, content: "for" }), NonTerminal(NonTerminalToken { span: (1924, 1927), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1924, 1925), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1924, 1925), rule: E_VariableName, content: "j" })] }), Terminal(TerminalToken { span: (1925, 1926), rule: E_4_AssignmentOperator, content: "=" }), NonTerminal(NonTerminalToken { span: (1926, 1927), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1926, 1927), rule: E_Decimal, content: "0" })] })] }), NonTerminal(NonTerminalToken { span: (1929, 1934), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1929, 1930), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1929, 1930), rule: E_VariableName, content: "j" })] }), Terminal(TerminalToken { span: (1930, 1931), rule: E_12_RelationalOrderingOperator, content: "<" }), NonTerminal(NonTerminalToken { span: (1931, 1934), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1931, 1934), rule: E_VariableName, content: "ops" })] })] }), NonTerminal(NonTerminalToken { span: (1936, 1939), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1936, 1937), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1936, 1937), rule: E_VariableName, content: "j" })] }), Terminal(TerminalToken { span: (1937, 1939), rule: E_18_PostfixOperator, content: "++" })] }), NonTerminal(NonTerminalToken { span: (1941, 1986), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (1955, 1975), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1955, 1958), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1955, 1958), rule: E_VariableName, content: "lin" })] }), Terminal(TerminalToken { span: (1959, 1961), rule: E_4_AssignmentOperator, content: "+=" }), NonTerminal(NonTerminalToken { span: (1962, 1964), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1962, 1964), rule: E_VariableName, content: "in" })] }), Terminal(TerminalToken { span: (1964, 1965), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1965, 1966), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1965, 1966), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1965, 1966), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1965, 1966), rule: E_VariableName, content: "j" })] })] })] }), Terminal(TerminalToken { span: (1966, 1967), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (1967, 1968), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (1968, 1969), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (1968, 1969), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1968, 1969), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1968, 1969), rule: E_VariableName, content: "k" })] })] })] }), Terminal(TerminalToken { span: (1969, 1970), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (1971, 1972), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (1973, 1975), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1973, 1975), rule: E_VariableName, content: "e2" })] })] }), Terminal(TerminalToken { span: (1975, 1976), rule: END_OF_LINE, content: ";" })] })] }), NonTerminal(NonTerminalToken { span: (1995, 2007), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (1995, 1997), rule: E_Value, subrules: [Terminal(TerminalToken { span: (1995, 1997), rule: E_VariableName, content: "e2" })] }), Terminal(TerminalToken { span: (1998, 2000), rule: E_4_AssignmentOperator, content: "= " }), NonTerminal(NonTerminalToken { span: (2000, 2002), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2000, 2002), rule: E_VariableName, content: "e2" })] }), Terminal(TerminalToken { span: (2003, 2004), rule: E_14_SumOperator, content: "+" }), NonTerminal(NonTerminalToken { span: (2005, 2007), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2005, 2007), rule: E_VariableName, content: "e2" })] })] }), Terminal(TerminalToken { span: (2007, 2008), rule: END_OF_LINE, content: ";" })] })] }), NonTerminal(NonTerminalToken { span: (2020, 2026), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2020, 2022), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2020, 2022), rule: E_VariableName, content: "e2" })] }), Terminal(TerminalToken { span: (2023, 2025), rule: E_4_AssignmentOperator, content: "= " }), NonTerminal(NonTerminalToken { span: (2025, 2026), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2025, 2026), rule: E_Decimal, content: "1" })] })] }), Terminal(TerminalToken { span: (2026, 2027), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (2032, 2218), rule: ForStatement, subrules: [Terminal(TerminalToken { span: (2032, 2035), rule: ForKW, content: "for" }), NonTerminal(NonTerminalToken { span: (2037, 2040), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2037, 2038), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2037, 2038), rule: E_VariableName, content: "k" })] }), Terminal(TerminalToken { span: (2038, 2039), rule: E_4_AssignmentOperator, content: "=" }), NonTerminal(NonTerminalToken { span: (2039, 2040), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2039, 2040), rule: E_Decimal, content: "0" })] })] }), NonTerminal(NonTerminalToken { span: (2042, 2048), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2042, 2043), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2042, 2043), rule: E_VariableName, content: "k" })] }), Terminal(TerminalToken { span: (2043, 2044), rule: E_12_RelationalOrderingOperator, content: "<" }), NonTerminal(NonTerminalToken { span: (2044, 2048), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2044, 2048), rule: E_VariableName, content: "nout" })] })] }), NonTerminal(NonTerminalToken { span: (2050, 2053), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2050, 2051), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2050, 2051), rule: E_VariableName, content: "k" })] }), Terminal(TerminalToken { span: (2051, 2053), rule: E_18_PostfixOperator, content: "++" })] }), NonTerminal(NonTerminalToken { span: (2055, 2218), rule: Body, subrules: [NonTerminal(NonTerminalToken { span: (2065, 2090), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2065, 2068), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2065, 2068), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (2068, 2069), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (2069, 2070), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (2069, 2070), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2069, 2070), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2069, 2070), rule: E_VariableName, content: "k" })] })] })] }), Terminal(TerminalToken { span: (2070, 2071), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (2072, 2075), rule: E_2_SignalLeftHandOperator, content: "<--" }), NonTerminal(NonTerminalToken { span: (2076, 2086), rule: E_Value, subrules: [NonTerminal(NonTerminalToken { span: (2076, 2086), rule: E_Brackets, subrules: [Terminal(TerminalToken { span: (2076, 2077), rule: E_BracketsOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (2077, 2085), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2077, 2080), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2077, 2080), rule: E_VariableName, content: "lin" })] }), Terminal(TerminalToken { span: (2081, 2083), rule: E_13_BitwiseShiftOperator, content: ">>" }), NonTerminal(NonTerminalToken { span: (2084, 2085), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2084, 2085), rule: E_VariableName, content: "k" })] })] }), Terminal(TerminalToken { span: (2085, 2086), rule: E_BracketsOperatorclose, content: ")" })] })] }), Terminal(TerminalToken { span: (2087, 2088), rule: E_10_BitwiseAndOperator, content: "&" }), NonTerminal(NonTerminalToken { span: (2089, 2090), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2089, 2090), rule: E_Decimal, content: "1" })] })] }), Terminal(TerminalToken { span: (2090, 2091), rule: END_OF_LINE, content: ";" }), Terminal(TerminalToken { span: (2101, 2125), rule: COMMENT, content: "// Ensure out is binary\n" }), NonTerminal(NonTerminalToken { span: (2133, 2160), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2133, 2136), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2133, 2136), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (2136, 2137), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (2137, 2138), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (2137, 2138), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2137, 2138), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2137, 2138), rule: E_VariableName, content: "k" })] })] })] }), Terminal(TerminalToken { span: (2138, 2139), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (2140, 2141), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (2142, 2154), rule: E_Value, subrules: [NonTerminal(NonTerminalToken { span: (2142, 2154), rule: E_Brackets, subrules: [Terminal(TerminalToken { span: (2142, 2143), rule: E_BracketsOperatorOpen, content: "(" }), NonTerminal(NonTerminalToken { span: (2143, 2153), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2143, 2146), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2143, 2146), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (2146, 2147), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (2147, 2148), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (2147, 2148), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2147, 2148), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2147, 2148), rule: E_VariableName, content: "k" })] })] })] }), Terminal(TerminalToken { span: (2148, 2149), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (2150, 2151), rule: E_14_SumOperator, content: "-" }), NonTerminal(NonTerminalToken { span: (2152, 2153), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2152, 2153), rule: E_Decimal, content: "1" })] })] }), Terminal(TerminalToken { span: (2153, 2154), rule: E_BracketsOperatorclose, content: ")" })] })] }), Terminal(TerminalToken { span: (2155, 2158), rule: E_1_SignalAssertionConstraintOperator, content: "===" }), NonTerminal(NonTerminalToken { span: (2159, 2160), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2159, 2160), rule: E_Decimal, content: "0" })] })] }), Terminal(TerminalToken { span: (2160, 2161), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (2171, 2190), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2171, 2175), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2171, 2175), rule: E_VariableName, content: "lout" })] }), Terminal(TerminalToken { span: (2176, 2178), rule: E_4_AssignmentOperator, content: "+=" }), NonTerminal(NonTerminalToken { span: (2179, 2182), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2179, 2182), rule: E_VariableName, content: "out" })] }), Terminal(TerminalToken { span: (2182, 2183), rule: E_20_BracedOperatorOpen, content: "[" }), NonTerminal(NonTerminalToken { span: (2183, 2184), rule: E_20_ArgumentsContent, subrules: [NonTerminal(NonTerminalToken { span: (2183, 2184), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2183, 2184), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2183, 2184), rule: E_VariableName, content: "k" })] })] })] }), Terminal(TerminalToken { span: (2184, 2185), rule: E_20_BracedOperatorClose, content: "]" }), Terminal(TerminalToken { span: (2186, 2187), rule: E_15_ProductOperator, content: "*" }), NonTerminal(NonTerminalToken { span: (2188, 2190), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2188, 2190), rule: E_VariableName, content: "e2" })] })] }), Terminal(TerminalToken { span: (2190, 2191), rule: END_OF_LINE, content: ";" }), NonTerminal(NonTerminalToken { span: (2201, 2211), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2201, 2203), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2201, 2203), rule: E_VariableName, content: "e2" })] }), Terminal(TerminalToken { span: (2204, 2206), rule: E_4_AssignmentOperator, content: "= " }), NonTerminal(NonTerminalToken { span: (2206, 2208), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2206, 2208), rule: E_VariableName, content: "e2" })] }), Terminal(TerminalToken { span: (2208, 2209), rule: E_14_SumOperator, content: "+" }), NonTerminal(NonTerminalToken { span: (2209, 2211), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2209, 2211), rule: E_VariableName, content: "e2" })] })] }), Terminal(TerminalToken { span: (2211, 2212), rule: END_OF_LINE, content: ";" })] })] }), Terminal(TerminalToken { span: (2224, 2243), rule: COMMENT, content: "// Ensure the sum;\n" }), NonTerminal(NonTerminalToken { span: (2248, 2260), rule: Expression, subrules: [NonTerminal(NonTerminalToken { span: (2248, 2251), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2248, 2251), rule: E_VariableName, content: "lin" })] }), Terminal(TerminalToken { span: (2252, 2255), rule: E_1_SignalAssertionConstraintOperator, content: "===" }), NonTerminal(NonTerminalToken { span: (2256, 2260), rule: E_Value, subrules: [Terminal(TerminalToken { span: (2256, 2260), rule: E_VariableName, content: "lout" })] })] }), Terminal(TerminalToken { span: (2260, 2261), rule: END_OF_LINE, content: ";" })] })] }), Terminal(TerminalToken { span: (2264, 2264), rule: EOI, content: "" })] })]